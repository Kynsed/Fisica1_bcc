// Copyright 2016 Erik Neumann.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { ComputeForces, NextContactPolicy } from '../ComputeForces.js';
import { RandomLCG } from '../../util/Random.js';
import { Util } from '../../util/Util.js';
import { UtilEngine } from '../UtilEngine.js';
import { Vector } from '../../util/Vector.js';

import { assertEquals, schedule, startTest, assertThrows,
    assertTrue, assertFalse, assertRoughlyEquals, reportTestResults }
    from "../../../test/TestRig.js";

const groupName = 'UtilEngineTest.';

export default function scheduleTests() {
  schedule(testNumericalMath);
  schedule(testNumericalBug1);
  schedule(testRandomInts);
  schedule(testRedundantMatrix3);
  schedule(testRedundantMatrix4);
  schedule(testRedundantMatrix5);
  schedule(testRedundantMatrix6);
  schedule(testRedundantMatrix7);
  schedule(testRedundantMatrix8);
  schedule(testRedundantMatrix9);
  schedule(testRedundantMatrix10);
  schedule(testMatrix11);
  schedule(testMatrix11_CF);
  schedule(testMatrix12);
  schedule(testMatrix12_CF);
  schedule(testMatrix13);
  schedule(testMatrix14);
  schedule(testMatrix15_CF);
  schedule(testMatrix16_CF);
  schedule(testMatrix17_CF);
  schedule(testMatrix18_CF);
  schedule(testMatrix19_CF);
  schedule(testMatrix20_CF);
  schedule(testMatrix21_CF);
  schedule(testMatrix22_CF);
  schedule(testMatrix23_CF);
  schedule(testMatrix24_CF);
  schedule(testMatrix25_CF);
  schedule(testMatrix26_CF);
  schedule(testMatrix27_CF);
  schedule(testLinesIntersect);
  schedule(testMatrix28_CF);
  schedule(testMatrix29_CF);
};

/* Check that double arithmetic behaves the expected ways.
See Java Floating-Point Number Intricacies by Thomas Wang, March 2000
 http://www.concentric.net/~ttwang/tech/javafloat.htm

to do:  figure out what is the smallest increment from 1.0 to the next bigger number.
*/
function testNumericalMath() {
  startTest(groupName+'testNumericalMath');
  const x = 1.0;
  let y = x/Number.POSITIVE_INFINITY;
  assertEquals(0.0, y);
  y = 1.0/Number.NEGATIVE_INFINITY;
  assertEquals(0.0, y);
  y = x/0.0;
  assertTrue(!isFinite(y));
  assertTrue(!isFinite(Number.POSITIVE_INFINITY));
  assertTrue(!isFinite(Number.NEGATIVE_INFINITY));
  assertTrue(!isFinite(Number.NaN));
  assertTrue(isFinite(1));
  // any arithmetic with NaN becomes NaN
  y = x*Number.NaN;
  assertTrue(isNaN(y));
  y = x/Number.NaN;
  assertTrue(isNaN(y));
  y = x+Number.NaN;
  assertTrue(isNaN(y));
  y = x-Number.NaN;
  assertTrue(isNaN(y));
  assertTrue(!isNaN(Number.POSITIVE_INFINITY));
  assertTrue(!isNaN(Number.NEGATIVE_INFINITY));
  assertTrue(!isNaN(Number.MAX_VALUE));
  assertTrue(!isNaN(-Number.MAX_VALUE));
  assertTrue(-Number.MAX_VALUE < -Number.MAX_VALUE/10);
  const big = 690E45;
  assertTrue((big + 1) - big == 0);
  const cosAngle = 0.9999937675535157;
  const sinAngle = 0.0035305600299897267;
  const angle = 0.0035305673646834944;
  const l2 = cosAngle*cosAngle + sinAngle*sinAngle;
  assertTrue(Math.abs(l2 - 1.0) < 1E-12);
  assertTrue(cosAngle == Math.cos(angle));
  assertTrue(sinAngle == Math.sin(angle));
};

/* This demonstrates a numerical bug where x + (y - x) < y.
This came up in CollisionSim.advance in calculating the amount of time advanced.
*/
function testNumericalBug1() {
  startTest(groupName+'testNumericalBug1');
  const timeStep = 0.01;
  const timeAdvanced=0.0018413108427360715;
  const stepSize = timeStep - timeAdvanced;
  assertTrue(timeAdvanced + stepSize < timeStep);
};

function testRandomInts() {
  startTest(groupName+'testRandomInts');
  // 2 arrays of random ints should be different
  const prng = new RandomLCG(6473275);
  const a = prng.randomInts(100);
  const b = prng.randomInts(100);
  let same = true;
  for (let i=0; i<a.length; i++) {
    if (a[i] != b[i]) {
      same = false;
      break;
    }
  }
  assertFalse(same);
  // all digits should be in the result
  const digit = new Array(a.length);
  for (let i=0; i<digit.length; i++)
    digit[i] = false;
  for (let i=0; i<a.length; i++)
    digit[a[i]] = true;
  for (let i=0; i<digit.length; i++)
    assertTrue(digit[i]);
};

/* this matrix is actually solveable (not singular, not redundant) though it gives very large numbers.
Here is the mathematica solution:
{0.000579228, 0.139932, -0.112466, 26544.3, -26544.3, 0.129809, -1.02402, 0.0233028, 79632.8, -79632.8, 0.00878981, 0.0061003, 0.00125071, 0.0263103, -0.682809, 0.0300069, 0.104119}
*/
function testRedundantMatrix3() {
  startTest(groupName+'testRedundantMatrix3');
  const n = 17;
  const a = [
    2.7831932, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.1081028, -0.108503, 0, 0, 0,
    0, 0, 0, 3.7002506, -1.6999999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3237729,
    -3.7002753, 0.8981675, 0, 0, 0, -1.6999999, 3.6997493, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -3.3235572, 1.7000248, -0.8983626, 0, 0, 0, 0, 0,
    3.7000005, -1.7, 0, 0, 0, -0.8999994, 0.9000008, 0, 0.7809827, 0, 0,
    0, 0, 0, 0, 0, 0, -1.7, 3.6999995, 0, 0, 0, 0.8999992, -0.9000006, 0,
    -0.7809831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.7009455, -0.898738, 0, 0,
    0, 0, 0, 0, 0, -0.8989748, 0, -3.0212405, 0, 0, 0, 0, 0, -0.898738,
    1.2990545, 0, 0, 0, 0, 0, 0, 0, -0.7008203, 0, 0.672041, 0, 0, 0, 0,
    0, 0, 0, 1.0151569, 0, 0, 0, 0, 0, 0, 0, -0.2315596, -0.160466, 0, 0,
    0, -0.8999994, 0.8999992, 0, 0, 0, 1.2999995, 0.7, 0, -1.2603274, 0,
    0, 0, 0, 0, 0, 0, 0, 0.9000008, -0.9000006, 0, 0, 0, 0.7, 1.3000005,
    0, -0.7396722, 0, 0, 0, 0, 0, -0.1081028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    2.2196543, -0.9934408, -0.7583897, 0.652862, 0, -0.9869682, 0,
    -0.108503, 0, 0, 0.7809827, -0.7809831, 0, 0, 0, -1.2603274,
    -0.7396722, -0.9934408, 2.2325038, 0, 0, 0, 0, 0, 0, 1.3237729,
    -3.3235572, 0, 0, 0, 0, 0, 0, 0, -0.7583897, 0, 6.6994846,
    -2.6473275, 0.7730619, 1.22526, 0, 0, -3.7002753, 1.7000248, 0, 0, 0,
    0, 0, 0, 0, 0.652862, 0, -2.6473275, 6.7000807, -0.8984818,
    -2.7732666, 0, 0, 0.8981675, -0.8983626, 0, 0, -0.8989748,
    -0.7008203, 0, 0, 0, 0, 0, 0.7730619, -0.8984818, 2.5981493, 0,
    0.6732344, 0, 0, 0, 0, 0, 0, 0, -0.2315596, 0, 0, -0.9869682, 0,
    1.22526, -2.7732666, 0, 5.2209788, -0.6834598, 0, 0, 0, 0, 0,
    -3.0212405, 0.672041, -0.160466, 0, 0, 0, 0, 0, 0, 0.6732344,
    -0.6834598, 5.2225903
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [-0, -0, -0, -0, -0, 1.6999992, -0.8984231,
        -0, -0, -0, -0, -0, -0, -0, -0.8989383, -0, -1.0205326];
  const x = new Array(n);
  // regular matrix solve is unsuccessful
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  //UtilEngine.printArray('x', x);
  // check that this linear combo of the rows of A is close to the b vector
  const err = UtilEngine.matrixSolveError(A, x, b);
  assertTrue( err < 1e-6 );
};

function testRedundantMatrix4() {
  startTest(groupName+'testRedundantMatrix4');
  const a = [
    2.7831878, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.1081068, 0, 0, 0, 0,
    0, 3.7002506, -1.6999999, 0, 0, 0, 0, 0, 0, 0, 0, 1.3237512, 0, 0, 0,
    0, -1.6999999, 3.6997493, 0, 0, 0, 0, 0, 0, 0, 0, -3.3235354, 0, 0, 0,
    0, 0, 0, 3.6999869, -1.7, 0, 0, 0, -0.9000175, 0.8999782, 0, 0, 0, 0, 0,
    0, 0, 0, -1.7, 3.7000131, 0, 0, 0, 0.9000218, -0.8999825, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 3.6990532, -1.6999992, 0.8984231, 0, 0, 0, 0, -3.699724, 0, 1.020529,
    0, 0, 0, 0, 0, -1.6999992, 3.7009455, -0.898738, 0, 0, 0, 0, 1.7006703, 0, -3.0212368,
    0, 0, 0, 0, 0, 0.8984231, -0.898738, 1.2990545, 0, 0, 0, 0, -0.8989525, 0, 0.6720397,
    0, 0, 0, -0.9000175, 0.9000218, 0, 0, 0, 1.3000131, 0.7, 0, 0, 0, 0, 0,
    0, 0, 0, 0.8999782, -0.8999825, 0, 0, 0, 0.7, 1.2999869, 0, 0, 0, 0, 0,
    -0.1081068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.2196496, -0.7583806, 0.6578898, -0.9869618, 0,
    0, 1.3237512, -3.3235354, 0, 0, 0, 0, 0, 0, 0, -0.7583806, 6.6994471, -1.3414554, 1.2252569, 0,
    0, 0, 0, 0, 0, -3.699724, 1.7006703, -0.8989525, 0, 0, 0.6578898, -1.3414554, 6.7311444, -2.7875288, -1.0210311,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.9869618, 1.2252569, -2.7875288, 5.2209376, -0.6834391,
    0, 0, 0, 0, 0, 1.020529, -3.0212368, 0.6720397, 0, 0, 0, 0, -1.0210311, -0.6834391, 5.2225786
    ];
  const A = UtilEngine.newMatrixFromArray(15, a);
  const b = [0.9438315, -1.2617722, 3.127175, -0, -0, -0, -0, -0, -0, -0,
            -0.4735505, -2.8214364, -0, -0, -0];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
};

/*
This matrix caught a problem in matrix solving, where I was using too small of a
value for testing whether a pivot in the matrix was zero.  May 11 2011.
*/
function testRedundantMatrix5() {
  startTest(groupName+'testRedundantMatrix5');
  const a = [
    2.7795861, 0, 0, 0, 0, 0, 0, 0, -0.9528866, 0.1061772, -0.1117673, 0,
     0, 0, 0, -0, 0, 3.700137, -1.7, 0, 0, 0, 0, 0, 1.259836, 0, 0,
    1.3130398, 0.8986781, -0.9003413, 0, -0, 0, -1.7, 3.6998629, 0, 0,
    0, 0, 0, -3.1244488, 0, 0, -3.3129224, -0.8987848, 0.9000124, 0, -0,
     0, 0, 0, 1.2997451, 0.7000001, 0, 0, 0, 0, 0, 0,
    0, -0.7001864, -1.2994495, 0, -0.5886146, 0, 0, 0, 0.7000001,
    1.300255, 0, 0, 0, 0, 0, 0, 0, -1.3000685, -0.7002959, 0, 0.5893983,
     0, 0, 0, 0, 0, 1.1409586, 0, 0, 0, 0, 0, 0, 0, 0, 0.05738,
    0.4230757, 0, 0, 0, 0, 0, 0, 1.3002983, 0.7000001, 0, 0, -1.2597276,
     0, 0, 0, 0, -0, 0, 0, 0, 0, 0, 0, 0.7000001, 1.2997018, 0,
    0, -0.7405305, 0, 0, 0, 0, -0, -0.9528866, 1.259836, -3.1244488, 0,
    0, 0, 0, 0, 5.7769954, -0.0846539, -0.2434525, 2.8103096,
    0.3682292, -1.0922516, 0, -0, 0.1061772, 0, 0, 0, 0, 0, 0,
    0, -0.0846539, 2.2547865, -1.0032669, -0.5420242, 0,
    0, -1.0623076, -0, -0.1117673, 0, 0, 0, 0,
    0, -1.2597276, -0.7405305, -0.2434525, -1.0032669, 2.2316368, 0, 0,
    0, 0, -0, 0, 1.3130398, -3.3129224, 0, 0, 0, 0, 0,
    2.8103096, -0.5420242, 0, 6.3232267, 0.769907, -0.7710797,
    0.5119813, -0, 0, 0.8986781, -0.8987848, -0.7001864, -1.3000685, 0,
    0, 0, 0.3682292, 0, 0, 0.769907, 2.599037, 1.4008461, 0, -0.5889562,
     0, -0.9003413, 0.9000124, -1.2994495, -0.7002959, 0, 0,
    0, -1.0922516, 0, 0, -0.7710797, 1.4008461, 2.5992721, 0, 0.5881756,
     0, 0, 0, 0, 0, 0.05738, 0, 0, 0, -1.0623076, 0, 0.5119813, 0, 0,
    5.1198566, 0.8590623
    ];
  const A = UtilEngine.newMatrixFromArray2(15, a);
  const b = [
    0 ,0 ,0 ,-588.61458E-3 ,589.39835E-3 ,423.07566E-3 ,0 ,0 ,0 ,0 ,0 ,0 ,
    -588.95623E-3 ,588.17558E-3 ,859.06227E-3
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
};

/* example where zero tolerance 0.0001 works but zero tolerance 0.001 doesn't work.
(May 2013:  I guess that means the tolerance passed to matrixSolve?)
*/
function testRedundantMatrix6() {
  startTest(groupName+'testRedundantMatrix6');
  const a = [
3.70010194720032, -1.6999999903751832, 0, 0, 0, 0, 0, 0, -0.8998890165420942, -1.77200233034648, 0.4940241310921793, 0, 0, 0, 0, 0, -0,
-1.6999999903751832, 3.6998980373999726, 0, 0, 0, 0, 0, 0, 0.8998844014814961, -0.2280268175322451, -0.4941187576462762, 0, 0, 0, 0, 0, -0,
0, 0, 3.699973570417178, -1.6999999993532446, 0, 0, 0, 0, -0.8999269792050215, 0, 0, -0.2100233451942024, 1.6998040445570157, 0.8996350911077936, -0.8981809267936222, -3.7003851855598255, -0,
0, 0, -1.6999999993532446, 3.7000264285480133, 0, 0, 0, 0, 0.8999064224498725, 0, 0, -1.7899843873483143, -3.6998304363686154, -0.8996145314954714, 0.8991920002730466, 1.7004118020378045, -0,
0, 0, 0, 0, 1.8560339794549126, 0, 0, -0.5701678615737991, 0, 0, -0.570026388698177, 0, 0, 0, 0, 0, -0,
0, 0, 0, 0, 0, 3.700901446135342, 0.9015034147840525, 0, 0, 0, 0, 0, 0, 0.9014490882856842, -0.9002846442953208, 0, -1.4714573224953436,
0, 0, 0, 0, 0, 0.9015034147840525, 1.3009026516055198, 0, 0, 0, 0, 0, 0, -0.699110580504684, -1.3003284570816995, 0, -0.8254209463791108,
0, 0, 0, 0, -0.5701678615737991, 0, 0, 1.3797645866565293, 0, 0, -0.6202919142400936, 0, 0, 0, 0, 0, -0,
-0.8998890165420942, 0.899884401481496, -0.8999269792050214, 0.8999064224498725, 0, 0, 0, 0, 2.5998689482432864, 0.2573388194414124, -1.1646697500517862, -0.2633024682958794, -0.8996527828010016, -1.299847182349487, -0.700465452971045, 0.9004925856654025, -0,
-1.77200233034648, -0.228026817532245, 0, 0, 0, 0, 0, 0, 0.2573388194414125, 4.920286736997493, -0.1412655952100423, -1.6999620864007672, 0.2100875887288783, 0, 0, 0, -0,
0.4940241310921792, -0.4941187576462762, 0, 0, -0.5700263886981771, 0, 0, -0.6202919142400936, -1.1646697500517862, -0.1412655952100423, 2.4700614392928273, 0, 0, 0, 0, 0, -0,
0, 0, -0.2100233451942024, -1.789984387348314, 0, 0, 0, 0, -0.2633024682958795, -1.6999620864007672, 0, 4.931502057871965, 3.5799573571091226, 0.2632170656885648, -0.2634289743638025, 0.2099027871401842, -0,
0, 0, 1.6998040445570155, -3.699830436368615, 0, 0, 0, 0, -0.8996527828010015, 0.2100875887288783, 0, 3.579957357109123, 4.930769130273162, 0.899360913032752, -0.899315092283965, -1.700215736685025, -0,
0, 0, 0.8996350911077937, -0.8996145314954715, 0, 0.9014490882856842, -0.699110580504684, 0, -1.299847182349487, 0, 0, 0.2632170656885648, 0.899360913032752, 2.600626114152888, 1.400247113479141, -0.9002006530594637, -0.8243970766288274,
0, 0, -0.8981809267936223, 0.8991920002730466, 0, -0.9002846442953208, -1.3003284570816998, 0, -0.7004654529710449, 0, 0, -0.2634289743638025, -0.8993150922839647, 1.4002471134791408, 2.5988805570349998, 0.8978895800445713, 0.8233460071965841,
0, 0, -3.7003851855598255, 1.7004118020378045, 0, 0, 0, 0, 0.9004925856654026, 0, 0, 0.209902787140184, -1.700215736685026, -0.9002006530594638, 0.8978895800445711, 6.995334564518396, 1.4897967319965286
    ];
  const A = UtilEngine.newMatrixFromArray2(16, a);
  const b = [
    -0, -0, -0, -0, -0, -1.4714573224953436, -0.8254209463791108, -0, -0, -0, -0,
    -0, -0, -0.8243970766288274, 0.8233460071965841, 1.4897967319965286
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
};

function testRedundantMatrix7() {
  startTest(groupName+'testRedundantMatrix7');
  const a = [
    3.6974923776779236, -1.6999941991396543, 0, 0, 0, 0, 0, 0, -0.8990570561135972, 1.6967629614324449, 0.4759223607581712, 0, 0, 0, 0, 0, 0, -0,
    -1.6999941991396543, 3.702498340945523, 0, 0, 0, 0, 0, 0, 0.8971085142255755, -3.6992634550637478, -0.4735813775528715, 0, 0, 0, 0, 0, 0, -0,
    0, 0, 3.700075274798905, -1.699999994752845, 0, 0, 0, 0, -0.9022627888809575, 0, 0, -2.5307148787240794, 1.7008008141769886, 0.8972848325079772, -0.9027032551922569, -3.6032530346411638, -3.7013647914671264, -0,
    0, 0, -1.699999994752845, 3.6999247168056475, 0, 0, 0, 0, 0.9050186877672243, 0, 0, 0.5306722030382771, -3.700724862888707, -0.897343457723333, 0.9011625236120934, 1.603180455818019, 1.7012917888300407, -0,
    0, 0, 0, 0, 1.796701636285715, 0, 0, -0.5819024604742635, 0, 0, -0.5852841300249704, 0, 0, 0, 0, 0, 0, -0,
    0, 0, 0, 0, 0, 3.698634595972345, -1.699998277252286, 0, 0, 0, 0, 0, 0, 0.8978813629202703, -0.8963173876816264, 0, 0, -1.5863768281323543,
    0, 0, 0, 0, 0, -1.699998277252286, 3.701362647631313, 0, 0, 0, 0, 0, 0, -0.8982514182783193, 0.8982862848104093, 0, 0, 3.587683208621223,
    0, 0, 0, 0, -0.5819024604742635, 0, 0, 1.4250154111451687, 0, 0, -0.5735293269416031, 0, 0, 0, 0, 0, 0, -0,
    -0.8990570561135973, 0.8971085142255755, -0.9022627888809572, 0.9050186877672242, 0, 0, 0, 0, 2.601155864435039, -0.8952262621112089, -1.1579138167955763, 0.5109464763546872, -0.9060934532417149, -1.3003137638103646, -0.6981393170241862, 0.8699004252221901, 0.9042157318944608, -0,
    1.6967629614324444, -3.6992634550637473, 0, 0, 0, 0, 0, 0, -0.8952262621112088, 5.5839510553705125, 0.4722060356820073, -0.5479088073086268, 1.8777918059346745, 0, 0, 0, 0, -0,
    0.4759223607581712, -0.4735813775528715, 0, 0, -0.5852841300249705, 0, 0, -0.5735293269416031, -1.157913816795576, 0.4722060356820072, 2.5114066713152527, 0, 0, 0, 0, 0, 0, -0,
    0, 0, -2.5307148787240794, 0.5306722030382771, 0, 0, 0, 0, 0.5109464763546872, -0.5479088073086268, 0, 5.566256838098088, -1.0613822390226884, -0.5087085068415537, 0.5120429523697037, 2.4758248386689456, 2.5314454885431403, -0,
    0, 0, 1.7008008141769888, -3.700724862888707, 0, 0, 0, 0, -0.9060934532417146, 1.8777918059346745, 0, -1.0613822390226884, 5.569307027992517, 0.898416348738905, -0.9006230649950305, -1.6039526040040066, -1.7020942181217833, -0,
    0, 0, 0.8972848325079772, -0.897343457723333, 0, 0.8978813629202704, -0.8982514182783193, 0, -1.3003137638103643, 0, 0, -0.5087085068415536, 0.8984163487389049, 2.5969245857417023, 1.4017942188199568, -0.8651493379192831, -0.8992347511892806, -0.8612070985226529,
    0, 0, -0.902703255192257, 0.9011625236120935, 0, -0.8963173876816264, 0.8982862848104092, 0, -0.6981393170241863, 0, 0, 0.5120429523697035, -0.9006230649950305, 1.4017942188199566, 2.599494068924456, 0.8703184910144363, 0.9016134131018751, 0.8597585625723888,
    0, 0, -3.6032530346411638, 1.6031804558180192, 0, 0, 0, 0, 0.8699004252221901, 0, 0, 2.4758248386689456, -1.6039526040040066, -0.8651493379192831, 0.8703184910144361, 7.207235013004815, 7.206432607758408, 1.6993518040000097,
    0, 0, -3.7013647914671264, 1.7012917888300407, 0, 0, 0, 0, 0.9042157318944609, 0, 0, 2.5314454885431403, -1.7020942181217824, -0.8992347511892808, 0.9016134131018749, 7.206432607758408, 7.212573489731945, 1.6038855336843656
    ];
  const A = UtilEngine.newMatrixFromArray2(17, a);
  const b = [
    -0, -0, -0, -0, -0, -1.5863768281323543, 3.587683208621223, -0, -0, -0, -0, -0,
    -0, -0.8612070985226529, 0.8597585625723888, 1.6993518040000097, 1.6038855336843656
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
};

function testRedundantMatrix8() {
  startTest(groupName+'testRedundantMatrix8');
  const a = [
      3.699900499932072, -1.6999999908344403, 0, 0, 0, 0, 0, 0, 0, 0.899839223244678, 1.6986878768332623, 0.4884437738078804, 0, 0, 0, 0, 0, -0,
      -1.6999999908344403, 3.7000994854030322, 0, 0, 0, 0, 0, 0, 0, -0.8999829316972552, -3.6987855127777705, -0.4883512233620975, 0, 0, 0, 0, 0, -0,
      0, 0, 3.6992772903045075, -1.6999995168973068, 0, 0, 0, 0, 0, 0.8987021612700457, 0, 0, -3.612111392769896, 1.7004879536749893, -0.8973474004852573, 0.899710848795327, 0, -0,
      0, 0, -1.6999995168973068, 3.700721936731184, 0, 0, 0, 0, 0, -0.8988320583976245, 0, 0, 1.6128104580538527, -3.7012086937147357, 0.8983901861855866, -0.8994570533367248, 0, -0,
      0, 0, 0, 0, 1.8489601082427216, 0, 0, 0, -0.5717040051592734, 0, 0, -0.5718416346952379, 0, 0, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 3.7004448660305065, -1.6999998166330208, 0.9007416878734811, 0, 0, 0, 0, 0, 0, -0.9008914213976422, 0.8976983513724901, 0, -1.597471214805085,
      0, 0, 0, 0, 0, -1.6999998166330208, 3.6995548405823264, -0.9005932402785974, 0, 0, 0, 0, 0, 0, 0.8999404338481054, -0.8980448231901583, 0, 3.5970430749613307,
      0, 0, 0, 0, 0, 0.9007416878734811, -0.9005932402785974, 1.3004451594176714, 0, 0, 0, 0, 0, 0, -1.3003611712289813, -0.7004874601754172, 0, -0.8666417290085902,
      0, 0, 0, 0, -0.5717040051592734, 0, 0, 0, 1.3849950855661501, 0, 0, -0.6149494531304793, 0, 0, 0, 0, 0, -0,
      0.899839223244678, -0.8999829316972552, 0.8987021612700457, -0.8988320583976245, 0, 0, 0, 0, 0, 2.5991194065292063, 0.9008907449048578, -0.8372169183227627, -0.8700840954039787, 0.8976489169986704, -1.2988795514584048, -0.7005493624121167, 0, -0,
      1.698687876833262, -3.6987855127777705, 0, 0, 0, 0, 0, 0, 0, 0.9008907449048578, 7.261685160151165, 0.486768258562626, -1.6304009530550603, 3.5459091668483653, 0, 0, 0.8690611265530938, -0,
      0.4884437738078804, -0.4883512233620975, 0, 0, -0.5718416346952377, 0, 0, 0, -0.6149494531304792, -0.8372169183227628, 0.4867682585626261, 2.4734512417560612, 0, 0, 0, 0, 0, -0,
      0, 0, -3.612111392769896, 1.6128104580538527, 0, 0, 0, 0, 0, -0.8700840954039787, -1.6304009530550598, 0, 7.226058811302897, -3.224909135077487, 0.8687583394314976, -0.8702638273768061, -0.8905498215173011, -0,
      0, 0, 1.7004879536749897, -3.7012086937147353, 0, 0, 0, 0, 0, 0.8976489169986706, 3.5459091668483658, 0, -3.2249091350774877, 7.2294351416591915, -0.89720688225137, 0.9009649618255119, 0.8628582206819849, -0,
      0, 0, -0.8973474004852572, 0.8983901861855869, 0, -0.9008914213976424, 0.8999404338481053, -1.3003611712289813, 0, -1.2988795514584046, 0, 0, 0.8687583394314975, -0.8972068822513702, 2.5988582933845, 1.4014198228283232, 0, 0.8659984735204442,
      0, 0, 0.899710848795327, -0.8994570533367248, 0, 0.8976983513724901, -0.8980448231901583, -0.7004874601754172, 0, -0.7005493624121167, 0, 0, -0.8702638273768061, 0.9009649618255118, 1.4014198228283234, 2.598305500687045, 0, -0.8637050139968621,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8690611265530939, 0, -0.890549821517301, 0.8628582206819851, 0, 0, 2.5969142049592207, -0.9025189416848407
    ];
  const A = UtilEngine.newMatrixFromArray2(17, a);
  const b = [
    -0, -0, -0, -0, -0, -1.597471214805085, 3.5970430749613307, -0.8666417290085902,
    -0, -0, -0, -0, -0, -0, 0.8659984735204442, -0.8637050139968621, -0.9025189416848407
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 3e-10 );
};

/** This matrix occurred on Aug 20 2011 in ContactTest, with six blocks resting on the
floor. It caused a problem with the matrix solver, which has been solved. See the test
{@link myphysicslab.test.StraightStraightTest.six_blocks_11},
which is where this matrix came from.
*/
function testRedundantMatrix9() {
  startTest(groupName+'testRedundantMatrix9');
  const a = [
      2.884788914934762, -0.4908891516982347, -0.5392791553437065, 0.4194142399376012, -0.4193991545308258, -2.2582186908325808, 0.2582214925726989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      -0.4908891516982346, 3.0140128092800715, 0.6046112861037997, 0, 0, 0, 0, 0, 0, 0, 0, 0.8217046091839957, -2.422668819683555, 0, 0, 0, 0, 0, -0,
      -0.5392791553437064, 0.6046112861037997, 1.9744325339033397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      0.4194142399376012, 0, 0, 1.3000060122246775, 0.7000000000334687, -0.9000080162437885, 0.9000100203298371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      -0.4193991545308258, 0, 0, 0.7000000000334687, 1.2999939878288733, 0.8999899796701634, -0.8999919837160493, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      -2.2582186908325808, 0, 0, -0.9000080162437885, 0.8999899796701634, 3.699993987775323, -1.6999999999665305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      0.2582214925726989, 0, 0, 0.9000100203298371, -0.8999919837160493, -1.6999999999665305, 3.700006012171126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0, 7.37084881914793, 7.371489947302713, 1.6858059538351502, -3.6856779273755262, 0, 0, -1.6999031490637535, 3.6673335016578616, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0, 7.371489947302715, 7.372281994025386, 1.700419192053728, -3.7002903698644425, 0, 0, -1.6860056368075482, 3.653603681068196, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0, 1.6858059538351506, 1.7004191920537273, 3.7001286887164238, -1.6999999846630143, 0, 0, 0, 0, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0, -3.6856779273755262, -3.7002903698644425, -1.6999999846630143, 3.699871286744399, 0, 0, 0, 0, 0, 0, 0, -0,
      0, 0.8217046091839959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.700123814623821, -1.699999985802894, 0, 0, 0, 0, 0, -0,
      0, -2.4226688196835555, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.699999985802894, 3.69987616266081, 0, 0, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0, -1.6999031490637526, -1.6860056368075482, 0, 0, 0, 0, 7.336262866457449, -3.3353639884336843, -3.6677113531138694, 1.6676478225183875, 0.8890955083561018, 0.8893575501879827,
      0, 0, 0, 0, 0, 0, 0, 3.667333501657861, 3.6536036810681964, 0, 0, 0, 0, -3.3353639884336843, 7.33523865461852, 1.6997735901581388, -3.699709190430424, -0.9001402951786914, -0.8996872983508283,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.6677113531138685, 1.6997735901581383, 3.70006429853253, -1.6999999961715782, -0.8999142622425873, -0.9001071693254477,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6676478225183875, -3.699709190430424, -1.6999999961715782, 3.699935695341994, 0.8998928306745508, 0.9000857331633055,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8890955083561018, -0.9001402951786913, -0.8999142622425873, 0.8998928306745508, 1.2999357014674675, -0.7000000038284219
    ];
  const A = UtilEngine.newMatrixFromArray2(18, a);
  const b = [
    -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, 0.8893575501879827,
     -0.8996872983508283, -0.9001071693254477, 0.9000857331633055, -0.7000000038284219
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
};

/** This matrix occurred on Aug 24 2011 in PolygonTest, with multiple shapes resting
on the floor.
*/
function testRedundantMatrix10() {
  startTest(groupName+'testRedundantMatrix10');
  const a = [
      2.1865166979865847, -0.0215396751014439, 0.0220271511411966, -0.0217713199944046, -0.000105975801523, -0.9891708035070803, -0.3427241601957276, 0.185686498254954, -0.1861364526269131, 0, 0, 0, 0, 0, 0, -0,
      -0.0215396751014439, 7.073409102180113, -1.2757615772836437, 1.3864623270581653, -1.0001278257247672, -1.1928044457508398, 0, -1.4567128591697207, 0, 0, 0, 0, 0, 0, 0, -0,
      0.0220271511411966, -1.275761577283644, 4.692326605078205, -3.3996865896554183, -0.999871426117676, 1.199260982087394, 0, 1.8094851379510586, 0, 0, 0, 0, 0, 0, 0, -0,
      -0.0217713199944046, 1.3864623270581653, -3.3996865896554183, 3.4002571063355496, 0.9998714296149616, -1.1998071272051771, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      -0.000105975801523, -1.0001278257247672, -0.9998714261176759, 0.9998714296149616, 1.0000000068869055, 0.0000642679752554, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      -0.9891708035070803, -1.1928044457508395, 1.199260982087394, -1.1998071272051771, 0.0000642679752554, 1.599742893664449, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0,
      -0.3427241601957276, 0, 0, 0, 0, 0, 3.6612541633170093, 1.02284214857883, -1.0231469466309315, -0.8659928039519024, -0.3836325564728285, 0.2137152813805886, 0.7863593295026904, 0, 0, -0,
      0.185686498254954, -1.4567128591697205, 1.8094851379510586, 0, 0, 0, 1.02284214857883, 4.42058758474978, -1.185977118584385, 0, 0, 0, 0, 0, 0, -0,
      -0.186136452626913, 0, 0, 0, 0, 0, -1.0231469466309315, -1.1859771185843848, 1.1861660481387295, 0, 0, 0, 0, 0, 0, -0,
      0, 0, 0, 0, 0, 0, -0.8659928039519025, 0, 0, 2.0741293629805355, -0.0000198043803167, -0.0000230484399315, 0.0000290515476051, -0.2667699659857678, 0.4001454472255172, 1.266767365854981,
      0, 0, 0, 0, 0, 0, -0.3836325564728284, 0, 0, -0.0000198043803167, 2.070790778802066, -1.1741724041475443, -0.8258110677273118, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0.2137152813805886, 0, 0, -0.0000230484399315, -1.1741724041475443, 1.428530763618738, 0.5714285727147754, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0.7863593295026905, 0, 0, 0.0000290515476051, -0.8258110677273117, 0.5714285727147754, 1.4286120948103227, 0, 0, -0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2667699659857678, 0, 0, 0, 1.9600057606104482, -0.4400014401310075, -0.960007200767381,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4001454472255172, 0, 0, 0, -0.4400014401310075, 3.1599913590735254, 1.4400036003556043
    ];
  const A = UtilEngine.newMatrixFromArray2(15, a);
  const b = [
    -0, -0, -0, -0, -0, -0, -0, -0, -0, 1.266767365854981, -0, -0, -0,
     -0.960007200767381, 1.4400036003556043
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
    // this is the solution found by Mathematica
  const x2 = [
    0.953361, 830.42, -2733.38, -3558.21, 1655.25, 0.151034, 0.602682, 1902.96,
    1903.33, 0.760965, 6.5475*10E-6, 0.0506631, -0.352014, -0.315417, 0.31542
    ];
  // show the Mathematica solution works
  assertTrue( UtilEngine.matrixSolveError(A, x2, b) < 1e-10 );
};

/**
*/
function makeMatrix11(): Float64Array[] {
  const a = [
    5.24025764299373, 0, 0, 0, 0, 0, 0, 0, 0, -2.615501943799582, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 5.368078595488846, 0, 0, 0, 0,
    -0.8140299898490666, 0, 0, 0, 0, 0, 0, 0, -3.5581732469449725,
    -5.351642023470751, 0, 0, 0, 0, 12.926430987309192, 0, 0,
    -2.9080986474212107, 0, 0, 0, 0, 0, 0, 2.9077839895418336,
    -12.457053551786112, 0, 0, 0, 0, 0, 0, 0, 3.295258459836762,
    -0.8233302487854683, 0, 0, 0, 0, 0, -0.1356273890752759,
    -2.0067350237542856, 0, 0, 0, -1.0958532935141885, 0, 0, 0, 0, 0,
    -0.8233302487854683, 3.5455333071585935, 0, 0, 0, 0, 0,
    -2.528284925650998, -0.543475435622451, 0, 0, 0, 1.1527376718703763,
    0, 0, 0, 0, -2.9080986474212107, 0, 0, 5.163618213883765, 0, 0, 0, 0,
    0, 0, -5.163456961776429, 2.6688319464879373, 0, 0, 0, 0, 0,
    -0.8140299898490668, 0, 0, 0, 0, 1.6030499072924265, 0, 0, 0, 0, 0,
    0, 0, -0.6987803646549116, 0.8158420083845184, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1.7100660050124357, 0.6622698927955679, 0, 0, 0, 0, 0,
    -0.1477564670525178, 0, 0.1654324873827444, 0.4724789285454851, 0, 0,
    0, 0, 0, 0, 0, 0.6622698927955684, 5.986873128230714, 0, 0, 0, 0, 0,
    0.768301536450459, 0, -0.8581260680960394, -2.4184491643374897,
    -2.6155019437995817, 0, 0, 0, 0, 0, 0, 0, 0, 5.232649230604096,
    -3.3904133341653226, -1.4047668997805558, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -0.1356273890752764, -2.528284925650998, 0, 0, 0, 0,
    -3.3904133341653226, 5.417014570019364, 2.246782622915908, 0, 0, 0,
    -0.6338896470103896, 0, 0, 0, 0, 0, -2.006735023754286,
    -0.5434754356224509, 0, 0, 0, 0, -1.4047668997805556,
    2.2467826229159082, 4.52255470493446, 0, 0, 0, 0.38766312755854, 0,
    0, 0, 0, 2.9077839895418345, 0, 0, -5.163456961776431, 0, 0, 0, 0, 0,
    0, 19.93778960237561, -11.98533235674039, 0, 0, 4.586486098670053,
    -0.783760826162637, 0, 0, -12.457053551786112, 0, 0,
    2.6688319464879378, 0, 0, 0, 0, 0, 0, -11.98533235674039,
    41.083866064650316, 0, 0, -7.2909666493724625, 1.267080760094386, 0,
    -3.558173246944972, 0, 0, 0, 0, -0.6987803646549116,
    -0.1477564670525178, 0.7683015364504587, 0, 0, 0, 0, 0,
    6.317881827340059, 3.538113132531078, -1.6849204236961082,
    -1.9533622957308638, 0, -5.35164202347075, 0, -1.095853293514188,
    1.1527376718703768, 0, 0.8158420083845185, 0, 0, 0,
    -0.6338896470103897, 0.38766312755854, 0, 0, 3.5381131325310786,
    7.227702718243339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1654324873827442,
    -0.8581260680960403, 0, 0, 0, 4.586486098670054, -7.290966649372462,
    -1.6849204236961084, 0, 9.446200978580713, 7.098240229588594, 0, 0,
    0, 0, 0, 0, 0, 0.472478928545485, -2.4184491643374892, 0, 0, 0,
    -0.783760826162637, 1.2670807600943856, -1.9533622957308636, 0,
    7.098240229588593, 8.402282686262154
    ];
  return UtilEngine.newMatrixFromArray(18, a);
};

/**
*/
function makeBVector11(): number[] {
  return [
    -0, -0, -1.996325979911138, -0, -0, 1.010768833586209,
    -0, -1.157020417054051, 5.897095231071411, -0, -0, -0,
    -1.012369782071089, 1.9060728169775671, 2.5518372298966074, -0,
    -2.670838140621714, -4.737977997368031
    ];
};

/** This matrix is from Pile on Nov 14 2011, it is solved imprecisely at tolerance
1E-6, but solved precisely at tolerance 1E-10. This matrix is singular, which helps
explain why it is sensitive to the matrixSolve tolerance, and why the solution x, in
A .x = b has such large numbers.
*/
function testMatrix11() {
  startTest(groupName+'testMatrix11');
  const A = makeMatrix11();
  const b = makeBVector11();
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
    // this is the solution found by Mathematica
  const x2 = [
    -1.991727687322564e-12, -9.246912067359662e-8,
    4334.209315080085, -1.3477624064693302e-10, 1.2793529321355117e-10,
    -4334.209315079608, -9.746529446177438e-8, 5871.395512421495, -5871.3955124216745,
    -3.9905021906013385e-12, -4.336678988689717e-12, -6.893644138152156e-13,
    -4466.831871049843, 4466.83316715344, -1.1645531194914052e-7,
    -4.995960709752079e-10, 20038.369144775315, -20039.369144986693
    ];
  // show the Mathematica solution works
  assertTrue( UtilEngine.matrixSolveError(A, x2, b) < 1e-10 );
};

/** Use testMatrix11 with ComputeForces.
Checks that various contact ordering policies find a valid solution.
*/
function testMatrix11_CF() {
  startTest(groupName+'testMatrix11_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix11_CF ***');
  const A = makeMatrix11();
  const n = A.length;
  const b = makeBVector11();
  const joint = new Array(n);
  for (let i=0; i<n; i++) {
    joint[i] = false;
  }
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/**
*/
function makeMatrix12(): Float64Array[] {
  const a = [
3.040694642274648, 0, 0, 0.01709055530317863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.17854656770013483, 0, 0, 0, 0, 0, 0, 0, -0.5950357471205004, 0, -3.0390160802451973, 0, 0, 0, 0, -0.6937593926545077, 0, -0.7269641453882664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.1797929927395687,
0, 7.297331768240345, 0, 0, 0, 0, 0.1009238030787658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.568314678505832, 0, -0.10048587507901019, 0, 0, 0, 0, 1.5853009221352987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 3.066366738615902, 0, 0, 0, 0, 0, 0.4552680563439062, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.0642241163106276, 0, 0, 0, 0, 0.09503934242557888, 0, 0, 0, 0, -0.1009265950846363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0.017090555303178684, 0, 0, 1.1508469586264067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0669493454165061, 0, 0, 0, 0, 0, 0, 0, -0.9341351154149053, 0, -0.017719778786138424, 0, 0, 0, 0, 0.2612962897178553, 0, 0.27374702729784406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1934806736185546,
0, 0, 0, 0, 8.840639554812451, 0, 0, 0, 0, -5.3572016978301225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.1259424433001555, 3.108758842749938, 0, 0, 0, 0, 0, 0, 0, -3.250556607772113, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 22.058886815868604, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.464381309831186, 0, 0, 0, 0, 0, 0, 0, 4.789334814930731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0.10092380307876603, 0, 0, 0, 0, 2.2553199964873785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.47817205924076, 0, -2.255450735136913, 0, 0, 0, 0, -0.4733027306454093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 4.488359286795465, 0, 0, 0, 3.54006689731105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.761565154387857, 0, 0, 0, 0, 0, -1.933318950801275, 0, 0, 0, 0,
0, 0, 0.45526805634390655, 0, 0, 0, 0, 0, 17.738846312007052, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4690240028932784, 0, 0, 0, 0, -0.664212826758684, 0, 0, 0, 0, 0.7031821666517104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, -5.357201697830122, 0, 0, 0, 0, 15.8749000962889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.661369253724779, -4.656851191304718, 0, 0, 0, 0, 0, 0, 0, -3.0024583584248425, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.7437256099151983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.039110689309283, 0, -0.39262003237223553, 0, 0, 0, -2.3779584617937854, 0, 0, -3.0471739762186965, 0,
0, 0, 0, 0, 0, 0, 0, 3.5400668973110494, 0, 0, 0, 4.857084679467252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.4829049808286756, 0, 0, 0, 0, 0, 2.648664273023668, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.541756357661491, -3.226464761717754, 0, 0, 0, -2.6758727430131564, 0, 0, -7.967716501119471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.233761670478102, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.2264647617177533, 6.710992278759576, 0, 0, 0, 1.9147461979004228, 0, 0, 1.3686374686695997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.716216492400616, 0, 0, 0,
-0.178546567700135, 0, 0, 0.06694934541650613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8561562909348484, 0, 0, 0, 0, 0, 0, 0, -0.02086657747696763, 0, 0.17793506953423632, 0, 0, 0, 0, -0.7852622071278469, 0, -0.7825662089555625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5834133303779689,
0, 0, 0, 0, 0, -6.464381309831185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.999888684585393, 0, 0, 0, 0, 0, 0, 0, -2.920503545692916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.307726934490479, 0, 0, 0.7493614636260013, 2.253423342466238, 1.2778945926093082, -1.6263396721414938, 0, 0, 0, -0.07015465423099676, 0, 0, 0, 0, 0, 0, -0.7515826202584037, -2.0014933034564093, 0, 0, 0, 0, -3.248389025246447, -2.1963620262446186, -5.494197659286147, 0,
0, -1.568314678505831, 0, 0, 0, 0, 0.47817205924076, 0, 0, 0, 0, 0, -2.6758727430131564, 1.914746197900422, 0, 0, 0, 5.6410122983112485, 0, -0.47928965546235913, 1.8079906039290758, 0, 0, 0, -2.2094764644592453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.928374944158187, 0, 0, 0,
0, 0, -3.064224116310628, 0, 0, 0, 0, 0, -0.46902400289327906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24.988962297337213, 0, 0, 0, 0, -0.11189785190643398, 0, 0, 0, 0, 0.11774925801078284, 0, 0, 0, 0, 0, 0, 0, -2.5577995301550054, 0, 0, 0, 0, 0, 0,
0, -0.10048587507900963, 0, 0, 0, 0, -2.2554507351369133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7493614636260015, -0.479289655462359, 0, 4.216072816141672, 0, 0.31372318514171776, -0.7514433469245989, 0, 0.4744210719527677, 0, 0, 0, 0, 0, 0, 0, 0, -1.9631287616974693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7.967716501119469, 1.3686374686695988, 0, 0, 2.2534233424662387, 1.8079906039290752, 0, 0, 10.460490216179931, 0, 0, 0, 0, 0, -2.260425245199148, 0, 0, 0, 0, 0, 0, 0, 0.18165504578615876, 0, 0, 0, 0, -2.117506801550408, -4.2043849640923066, -2.983792277892788, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2778945926093084, 0, 0, 0.31372318514171804, 0, 7.8273347965619315, -1.280486274315308, 0, 0, -0.3005426934595614, 0, 0, 0, 0, 0, 0, 0, -0.31473085989162153, 0, -6.676043778701786, 0, 0, 0, 0, -1.836491530995772, 0, 0,
-0.5950357471205003, 0, 0, -0.9341351154149052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.020866577476967463, 0, -1.6263396721414936, 0, 0, -0.7514433469245988, 0, -1.280486274315308, 2.501818645782916, 0, 0.5952243255185052, 0, 0, 0, 0, -0.07790009534523012, 0, -0.08162403219427317, 0, 0.7536860664802539, 0, 0, 0, 0, 0, 0, 0, 0, -0.3567105477387824,
0, 0, 0.09503934242557868, 0, 0, 4.789334814930731, 0, 0, -0.6642128267586838, 0, 0, 0, 0, 0, 0, -2.920503545692918, 0, 0, -0.11189785190643398, 0, 0, 0, 0, 8.41284640594064, 0, 0, 0, 0, -2.754357901964825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-3.0390160802451973, 1.5853009221352985, 0, -0.017719778786138507, 0, 0, -0.4733027306454095, 0, 0, 0, 0, 0, 0, 0, 0.17793506953423616, 0, 0, -2.2094764644592457, 0, 0.4744210719527676, 0, 0, 0.5952243255185052, 0, 5.249499785803856, 0, 0, 0, 0, 0.6937044545041776, 0, 0.7268838634941462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.177840573252194,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.30054269345956175, 0, 0, 0, 21.421249463274417, 0, 0.3024208050724917, 0, 0, -0.27638181139151907, 0, 0, 0, 0, 0.3474920229617283, 0, 0, 0, 0, -4.709652671059264, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0701546542309961, 0, 0, 0, -2.260425245199147, 0, 0, 0, 0, 0, 5.16173059748857, -2.232483614496612, 0, 0, -2.960824247683516, 0, 0, 0, -0.008900174759820079, -0.7899579914133579, 0, 0, 0, -2.1054104802159292, 2.259274023960289, 0.09287930839068759, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.30242080507249147, -2.2324836144966125, 8.47909953280088, 0, 0, 6.060277096838233, 0, 0, 0, 0, -1.333627792582457, 0, 0, 0, 0, 0, 0, 0,
0, 0, -0.10092659508463675, 0, -3.1259424433001564, 0, 0, 0, 0.7031821666517104, 4.6613692537247795, 0, 0, 0, 0, 0, 0, 0, 0, 0.11774925801078329, 0, 0, 0, 0, -2.7543579019648248, 0, 0, 0, 0, 7.618918885258526, -4.85796661806751, 0, 0, 0, 0, 0, 0, 0, 0.05600360474079946, 0, 0, 0, 0, 0,
-0.6937593926545079, 0, 0, 0.2612962897178553, 3.1087588427499386, 0, 0, 0, 0, -4.6568511913047175, 0, 0, 0, 0, -0.7852622071278469, 0, 0, 0, 0, 0, 0, 0, -0.07790009534523018, 0, 0.6937044545041777, 0, 0, 0, -4.857966618067511, 5.914282520208281, 0, 1.0715493632029045, 0, 0, 0, 0, 0, -0.047364548533711304, 0, 0, 0, 0, 1.846316184905451,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.27638181139151863, -2.960824247683516, 6.060277096838233, 0, 0, 8.046529330799508, 0, 0, 0, 0, 0.8046246838132206, 0, 0, 0, 0, 0, 0, 0,
-0.7269641453882663, 0, 0, 0.27374702729784395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.7825662089555625, 0, 0, 0, 0, 0, 0, 0, -0.081624032194273, 0, 0.7268838634941464, 0, 0, 0, 0, 1.0715493632029047, 0, 12.2872633256897, 0, 0, 0, 0, -2.6580834289118416, 5.285334328097726, 0, 0, 0, 0, -1.7642975140138484,
0, 0, 0, 0, 0, 0, 0, 1.7615651543878568, 0, 0, 3.0391106893092825, -2.482904980828675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.79420670945887, 0, -2.4775579278686513, 0, 0, 0, -6.475350042698077, 0, 0, -6.760989216763036, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.7515826202584036, 0, 0, -1.9631287616974693, 0, -0.3147308598916214, 0.7536860664802538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.9201426757804176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.39262003237223564, 0, 0, 0, 0, 0, -2.0014933034564097, 0, 0, 0, 0.18165504578615876, 0, 0, 0, 0, 0, -0.008900174759819857, 0, 0, 0, 0, 0, -2.4775579278686513, 0, 4.152198489772374, 0, 0, 0, -1.3788516218283886, -0.2514841367354155, -0.19851380617837378, 4.417132815119119, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.676043778701786, 0, 0, 0, 0.34749202296172754, -0.7899579914133583, -1.3336277925824571, 0, 0, 0.8046246838132207, 0, 0, 0, 0, 11.672562659604656, 0, 0, 0, 0, 1.8348599972309798, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.5577995301550054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.6580834289118416, 0, 0, 0, 0, 7.673690644635051, 0.12219940627572878, 0, 0, 0, 0, -2.979550716742749,
0, 0, 0, 0, -3.2505566077721135, 0, 0, 0, 0, -3.002458358424842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.056003604740799684, -0.047364548533711304, 0, 5.285334328097725, 0, 0, 0, 0, 0.12219940627572834, 9.339083656763647, 0, 0, 0, 0, -4.116356574005053,
0, 0, 0, 0, 0, 0, 0, -1.9333189508012747, 0, 0, -2.377958461793785, 2.648664273023668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.475350042698077, 0, -1.3788516218283886, 0, 0, 0, 18.24533203647993, 0, 0, 1.9901820145070594, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.2337616704781005, -6.716216492400615, 0, 0, -3.248389025246448, -1.928374944158187, 0, 0, -2.117506801550407, 0, 0, 0, 0, 0, -2.1054104802159292, 0, 0, 0, 0, 0, 0, 0, -0.25148413673541503, 0, 0, 0, 0, 13.155248874545626, 0.6954363438217966, 4.300614540203722, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.1963620262446186, 0, 0, 0, -4.2043849640923066, -1.8364915309957714, 0, 0, 0, -4.709652671059263, 2.2592740239602893, 0, 0, 0, 0, 0, 0, 0, -0.19851380617837344, 1.8348599972309803, 0, 0, 0, 0.6954363438217963, 10.941485470685642, 2.9146559630133364, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.047173976218697, 0, 0, 0, 0, 0, -5.494197659286148, 0, 0, 0, -2.9837922778927877, 0, 0, 0, 0, 0, 0.09287930839068737, 0, 0, 0, 0, 0, -6.760989216763036, 0, 4.417132815119119, 0, 0, 0, 1.99018201450706, 4.300614540203721, 2.914655963013337, 13.334234807380781, 0,
-3.1797929927395687, 0, 0, 1.1934806736185546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5834133303779689, 0, 0, 0, 0, 0, 0, 0, -0.35671054773878264, 0, 3.177840573252195, 0, 0, 0, 0, 1.8463161849054508, 0, -1.7642975140138484, 0, 0, 0, 0, -2.979550716742749, -4.116356574005053, 0, 0, 0, 0, 13.32782215604417
    ];
  return UtilEngine.newMatrixFromArray(43, a);
};

/**
*/
function makeBVector12(): number[] {
  return [
    -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0.5519084709951673, -0, -0, 0.32686189269549815, -0, -0.2360817957910113, 0.5631787673751059, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0.9155757777076441, -0, -0, -0, -0, -0, -0, -0, -0, -0
    ];
};

/* This matrix is from Pile with 16 blocks, random seed -1789491746, on Nov 20 2011,
it is solved imprecisely with matrix solve tolerance at 1e-10, but is solved well with
tolerance 1e-12. This matrix is singular, which helps explain why it is sensitive to
the matrixSolve tolerance, and why the solution x, in A x = b has such large numbers
*/
function testMatrix12() {
  startTest(groupName+'testMatrix12');
  const A = makeMatrix12();
  const b = makeBVector12();
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
    // this is the solution found by Mathematica
  const x2 = [
    -104.47425733426672, 0.29697908590886235, -2.1489983966328114e-16, 104.47263842618734, 1.5187297128665126e-14,
     2.8242287610253716e-15, -0.05092244616138966, -648210.2501095879, 1.132422250834543e-15, 1.48897517444417e-15,
     -523.5962002648035, 648210.250109583, 175095.66182544356, -174571.98664439825, 0.05639481629245197,
     -2.7958275955466352e-15, 129.2569248976267, -129.2566080323817, 8.719871443618053e-16, -0.31691295687786164,
     215248.85427596612, -0.00007950054502617532, 129.25394620298724, -1.6781586867800525e-14, -129.2555209657184,
     -1.8756514501595994e-6, -0.000012988677273772785, -0.000023919089786282978, -4.3697907943101473e-14,
     -6.697859545370207e-14, 0.000018046096410967286, -3.1012136780897807e-15, 166363.2280370757, -0.6189361034485492,
     -338757.1642520421, -0.000048752829380760085, 7.291364703820154e-15, 1.6817280921734524e-14, -166363.22803841188,
     -214725.22296563725, -9.649958379440031e-6, 338754.4547267552, 2.148634519879413e-14
    ];
  // show the Mathematica solution works
  assertTrue( UtilEngine.matrixSolveError(A, x2, b) < 1e-10 );
};

/** Solve testMatrix12 with ComputeForces.
Checks that various contact ordering policies find a valid solution.
Note that in the specific ordering there are a couple cases where we do
'FLIP-FLOP DEFER' because a contact did two zero sized steps back and forth
between C/NC while driving a particular contact to zero.
*/
function testMatrix12_CF() {
  startTest(groupName+'testMatrix12_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix12_CF ***');
  const A = makeMatrix12();
  const n = A.length;
  const b = makeBVector12();
  const joint = new Array(n);
  for (let i=0; i<n; i++) {
    joint[i] = false;
  }
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        // This causes the FLIP-FLOP DEFER condition to occur.
        const o = [ 31, 7, 3, 33, 22, 40, 10, 36, 20, 29, 42, 6, 21, 23, 14, 9, 4, 5, 38, 32, 11, 35, 16, 13, 24, 1, 27, 26, 18, 12, 19, 8, 37, 0, 39, 17, 2, 28, 15, 25, 30, 34, 41, 1, 10 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** For this matrix, tolerance 1E-14 fails, but a bigger tolerance of 1E-12 succeeds.
This matrix is from DoNothingGrinder, on Nov 29 2011.
*/
function testMatrix13() {
  startTest(groupName+'testMatrix13');
  const a = [
      1.0830295556083844, 0.5366085787025969, 0, 0, -1.4633914212974029, -0.000000000000007228,
      0.5366085787025969, 3.5862068965517095, 0, 0, 1.5862068965517095, 0,
      0, 0, 3.5862068965517206, -1.5862068965517246, 0, 0,
      0, 0, -1.5862068965517246, 3.586206896551729, 0, 0,
      -1.463391421297403, 1.5862068965517095, 0, 0, 3.5862068965517095, 0,
      -0.000000000000007228, 0, 0, 0, 0, 7.5624545695114005
    ];
  const A = UtilEngine.newMatrixFromArray(6, a);
  const b = [
    -1, -1, -0, -0, 1, 1.0701009352565578
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
    // this is the solution found by Mathematica
  const x2 = [
    3.4834803047893805, -1.929658607091768, 0., 0., 2.5538216976976114,
    0.14150180016562014
    ];
  // show the Mathematica solution works
  assertTrue( UtilEngine.matrixSolveError(A, x2, b) < 1e-10 );
};

/** For this matrix, tolerance 1E-10 fails, but a bigger tolerance of 1E-9 succeeds.
With tolerance 1E-10, the error is 0.000007629, but with tolerance 1E-9 error is
7.99097e-11.
This matrix is from DoNothingGrinder, on Nov 29 2011.
*/
function testMatrix14() {
  startTest(groupName+'testMatrix14');
  const a = [
      3.586206896147961, 0, 0, -3.586206896551724, 0, -1,
      0, 3.5862068965517238, -1.5862068965517238, 0, 0, 0,
      0, -1.5862068965517238, 3.586206896551724, 0, 0, 0,
      -3.586206896551724, 0, 0, 3.586206896955488, 0, 1,
      0, 0, 0, 0, 3.089825306743734, 0.028751860945604155,
      -1, 0, 0, 1, 0.028751860945604155, 3.009203080265496
    ];
  const A = UtilEngine.newMatrixFromArray(6, a);
  const b = [
    -0, -0, -0, -0, 0.20048009236083858, -1.9358290447661308
    ];
  const x = new Array(A.length);
  assertEquals(-1, UtilEngine.matrixSolve4(A, x, b, 1e-9));
  assertTrue( UtilEngine.matrixSolveError(A, x, b) < 1e-10 );
    // this is the solution found by Mathematica
  const x2 = [
    -179942.89225152493, 0., 0., -179942.69431674527, 0.07148853438707764,
    -0.7097624174303598
    ];
  // show the Mathematica solution works
  assertTrue( UtilEngine.matrixSolveError(A, x2, b) < 1e-10 );
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 7.60 or 225.9, depending on the order that the contacts are
treated.
Check that the default policy finds the minimum force, and that random contact
order does not find a lower force.
Update May 2013: all the solutions seem to be the maxForce = 7.60 now.
*/
function testMatrix15_CF() {
  startTest(groupName+'testMatrix15_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix15_CF ***');
  const a = [
      3.586206896551724E0, -1.5862068965517242E0, 1.5553194204865006E0, -5.426116139962586E-1, 0, 0, 0, 0, 5.426116139962587E-1, -1.5553194204865006E0, 1.5862068965517242E0, -3.586206896551724E0, 0, 0, -1E0, 0,
      -1.5862068965517242E0, 3.586206896551724E0, -3.5553194204865006E0, -1.4573883860037413E0, 0, 0, 0, 0, 1.4573883860037413E0, 3.5553194204865006E0, -3.586206896551724E0, 1.5862068965517242E0, 0, 0, -1E0, 0,
      1.5553194204865006E0, -3.5553194204865006E0, 3.52480083840998E0, 1.4519257245113302E0, 0, 0, 0, 0, -1.4519257245113297E0, -3.52480083840998E0, 3.5553194204865006E0, -1.5553194204865006E0, 6.123233995736766E-17, 0, 1E0, 0,
      -5.426116139962586E-1, -1.4573883860037413E0, 1.45192572451133E0, 1.080892265785095E0, 0, 0, 0, 0, -1.0808922657850948E0, -1.45192572451133E0, 1.4573883860037413E0, 5.426116139962586E-1, 6.123233995736766E-17, 0, 1E0, 0,
      0, 0, 0, 0, 3.586206896551726E0, -1.586206896551725E0, -3.586206896551726E0, 1.586206896551725E0, 0, 0, 0, 0, 0, 0, 0, -1E0,
      0, 0, 0, 0, -1.586206896551725E0, 3.586206896551724E0, 1.586206896551725E0, -3.586206896551724E0, 0, 0, 0, 0, 0, 0, 0, -1E0,
      0, 0, 0, 0, -3.586206896551726E0, 1.586206896551725E0, 3.586206896551726E0, -1.586206896551725E0, 0, 0, 0, 0, 0, 0, 0, 1E0,
      0, 0, 0, 0, 1.586206896551725E0, -3.586206896551724E0, -1.586206896551725E0, 3.586206896551724E0, 0, 0, 0, 0, 0, 0, 0, 1E0,
      5.426116139962588E-1, 1.4573883860037413E0, -1.45192572451133E0, -1.080892265785095E0, 0, 0, 0, 0, 1.0808922657850948E0, 1.45192572451133E0, -1.4573883860037413E0, -5.426116139962588E-1, -6.123233995736766E-17, 0, -1E0, 0,
      -1.5553194204865006E0, 3.5553194204865006E0, -3.52480083840998E0, -1.4519257245113302E0, 0, 0, 0, 0, 1.4519257245113297E0, 3.52480083840998E0, -3.5553194204865006E0, 1.5553194204865006E0, -6.123233995736766E-17, 0, -1E0, 0,
      1.5862068965517242E0, -3.586206896551724E0, 3.5553194204865006E0, 1.4573883860037413E0, 0, 0, 0, 0, -1.4573883860037413E0, -3.5553194204865006E0, 3.586206896551724E0, -1.5862068965517242E0, 0, 0, 1E0, 0,
      -3.586206896551724E0, 1.5862068965517242E0, -1.5553194204865006E0, 5.426116139962586E-1, 0, 0, 0, 0, -5.426116139962587E-1, 1.5553194204865006E0, -1.5862068965517242E0, 3.586206896551724E0, 0, 0, 1E0, 0,
      0, 0, 6.123233995736766E-17, 6.123233995736766E-17, 0, 0, 0, 0, -6.123233995736766E-17, -6.123233995736766E-17, 0, 0, 3.0938880679173764E0, 1.5289856435897214E-1, -2.19279540886184E-2, 1.3453401655638317E0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5289856435897214E-1, 3.248998317907744E0, 1.9642898956827006E0, -1.066126410406695E0,
      -1E0, -1E0, 1E0, 1E0, 0, 0, 0, 0, -1E0, -1E0, 1E0, 1E0, -2.19279540886184E-2, 1.9642898956827006E0, 3.005121366124348E0, 1.528985643395266E-1,
      0, 0, 0, 0, -1E0, -1E0, 1E0, 1E0, 0, 0, 0, 0, 1.3453401655638317E0, -1.066126410406695E0, 1.528985643395266E-1, 7.564791973365036E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -8.581529099367793E-15, -7.401486968697812E-15,
    -8.286272949361454E-16, -3.500022067364011E-16, -8.271806125530277E-24,
    -8.271806125530277E-24, 8.271806125530277E-24, 8.271806125530277E-24,
    3.500022067364011E-16, 8.286272949361454E-16, 7.401486968697812E-15,
    8.581529099367793E-15, -1.7136728774722613E1, -4.811055899284179E0,
    -6.759204746260199E-1, 1.6636681372681814E1
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 12, 13, 14, 15, 0, 1, 2, 3, 5, 4, 7, 6, 8, 9, 10, 11 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 7.7 );
    } else {
      assertTrue( maxForce > 7.5 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 3.033 or 3.588 or 234, depending on the order that the contacts
are treated. Checks that the default policy finds the minimum force, and that random
contact order does not find a lower force.
*/
function testMatrix16_CF() {
  startTest(groupName+'testMatrix16_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix16_CF ***');
  const a = [
    3.586206896551724E0, 3.5535547053368117E0, -1.4556236708540526E0, 1.5862068965517242E0, 0, 0, 0, 0, -1.5862068965517242E0, 1.4556236708540529E0, -3.5535547053368117E0, -3.586206896551724E0, 0, 1E0, 0, 0,
    3.5535547053368117E0, 3.5213147648171383E0, -1.4498711878479162E0, 1.5535547053368117E0, 0, 0, 0, 0, -1.5535547053368117E0, 1.4498711878479162E0, -3.5213147648171383E0, -3.5535547053368117E0, 6.123233995736766E-17, 1E0, 0, 0,
    -1.4556236708540526E0, -1.4498711878479162E0, 1.0802692660511086E0, 5.443763291459475E-1, 0, 0, 0, 0, -5.443763291459475E-1, -1.0802692660511086E0, 1.4498711878479162E0, 1.4556236708540526E0, -6.123233995736766E-17, -1E0, 0, 0,
    1.5862068965517242E0, 1.5535547053368117E0, 5.443763291459474E-1, 3.586206896551724E0, 0, 0, 0, 0, -3.586206896551724E0, -5.443763291459471E-1, -1.5535547053368117E0, -1.5862068965517242E0, 0, -1E0, 0, 0,
    0, 0, 0, 0, 3.586206896551724E0, 1.5862068965517242E0, -1.5862068965517242E0, -3.586206896551724E0, 0, 0, 0, 0, 0, 0, 1E0, 0,
    0, 0, 0, 0, 1.5862068965517242E0, 3.586206896551724E0, -3.586206896551724E0, -1.5862068965517242E0, 0, 0, 0, 0, 0, 0, -1E0, 0,
    0, 0, 0, 0, -1.5862068965517242E0, -3.586206896551724E0, 3.586206896551724E0, 1.5862068965517242E0, 0, 0, 0, 0, 0, 0, 1E0, 0,
    0, 0, 0, 0, -3.586206896551724E0, -1.5862068965517242E0, 1.5862068965517242E0, 3.586206896551724E0, 0, 0, 0, 0, 0, 0, -1E0, 0,
    -1.5862068965517242E0, -1.5535547053368117E0, -5.443763291459474E-1, -3.586206896551724E0, 0, 0, 0, 0, 3.586206896551724E0, 5.443763291459471E-1, 1.5535547053368117E0, 1.5862068965517242E0, 0, 1E0, 0, 0,
    1.4556236708540526E0, 1.4498711878479162E0, -1.0802692660511086E0, -5.443763291459472E-1, 0, 0, 0, 0, 5.443763291459472E-1, 1.0802692660511086E0, -1.4498711878479162E0, -1.4556236708540526E0, 6.123233995736766E-17, 1E0, 0, 0,
    -3.5535547053368117E0, -3.5213147648171383E0, 1.4498711878479162E0, -1.5535547053368117E0, 0, 0, 0, 0, 1.5535547053368117E0, -1.4498711878479162E0, 3.5213147648171383E0, 3.5535547053368117E0, -6.123233995736766E-17, -1E0, 0, 0,
    -3.586206896551724E0, -3.5535547053368117E0, 1.4556236708540526E0, -1.5862068965517242E0, 0, 0, 0, 0, 1.5862068965517242E0, -1.4556236708540529E0, 3.5535547053368117E0, 3.586206896551724E0, 0, -1E0, 0, 0,
    0, 6.123233995736766E-17, -6.123233995736766E-17, 0, 0, 0, 0, 0, 0, 6.123233995736766E-17, -6.123233995736766E-17, 0, 3.0939194237218755E0, -2.1905922225415753E-2, 1.3451215287497018E0, 1.5274494123202206E-1,
    1E0, 1E0, -1E0, -1E0, 0, 0, 0, 0, 1E0, 1E0, -1E0, -1E0, -2.1905922225415753E-2, 3.005109373647426E0, 1.5274494124655502E-1, 1.9643735164638259E0,
    0, 0, 0, 0, 1E0, -1E0, 1E0, -1E0, 0, 0, 0, 0, 1.3451215287497018E0, 1.5274494124655502E-1, 7.566316477591808E0, -1.0650552318278812E0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5274494123202206E-1, 1.9643735164638259E0, -1.0650552318278812E0, 3.2484152494489766E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -1.3424401586643434E-14, -4.844789302125198E-15,
    -7.066670319407715E-16, -2.626209332430736E-16, -1.5728165174817075E-16,
    -5.551116260499125E-17, 5.551116260499125E-17, 1.5728165174817075E-16,
    2.626209332430736E-16, 7.066670319407715E-16, 4.844789302125198E-15,
    1.3424401586643434E-14, -1.3809827337877498E0, 2.2468390235588426E-1,
    2.128406055877737E0, 2.6960622252634066E0
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 12, 14, 13, 15, 7, 10, 3, 2, 6, 5, 1, 4, 11, 9, 0, 8 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 3.1 );
    } else {
      assertTrue( maxForce > 3.0 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 49 or 54 or 179 or 338, depending on the order that the contacts
are treated. Checks that the default policy finds the minimum force, and that random
contact order does not find a lower force.

This is an interesting case in that with ComputeForces.SINGULAR_MATRIX_LIMIT = 1.0 we
always get a maxForce of 49.32. But with ComputeForces.SINGULAR_MATRIX_LIMIT = 2E-3 we
get many cases where maxForce is 54 or 179.
*/
function testMatrix17_CF() {
  startTest(groupName+'testMatrix17_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix17_CF ***');
  const a = [
       3.5862068965644167E0, 8.740518805228181E-1, -1.2238791539650893E0, 1.5862068965644176E0, 0, 0, 0, 0, -1.5862068965517242E0, 1.223879153952218E0, -8.740518805356892E-1, -3.5862068965517233E0, 1E0, 0, 0, 0,
       8.74051880522818E-1, 2.3580005743378982E0, 8.37769688861518E-1, 2.874051880522819E0, 0, 0, 0, 0, -2.874051880513621E0, -8.37769688870845E-1, -2.358000574347225E0, -8.7405188051362E-1, -1E0, 0, 6.13521489875853E-12, 0,
       -1.2238791539650893E0, 8.37769688861518E-1, 1.0193804585575528E0, 7.761208460349106E-1, 0, 0, 0, 0, -7.761208460360094E-1, -1.0193804585564386E0, -8.377696888604038E-1, 1.2238791539639904E0, -1E0, 0, 6.13521489875853E-12, 0,
       1.5862068965644176E0, 2.874051880522819E0, 7.761208460349106E-1, 3.5862068965644185E0, 0, 0, 0, 0, -3.586206896551725E0, -7.76120846047782E-1, -2.87405188053569E0, -1.5862068965517242E0, -1E0, 0, 0, 0,
       0, 0, 0, 0, 3.586206896549234E0, 1.5862068965492355E0, -1.5862068965517233E0, -3.5862068965517224E0, 0, 0, 0, 0, 0, -1E0, 0, 0,
       0, 0, 0, 0, 1.5862068965492355E0, 3.586206896549236E0, -3.586206896551724E0, -1.5862068965517233E0, 0, 0, 0, 0, 0, 1E0, 0, 0,
       0, 0, 0, 0, -1.5862068965517233E0, -3.586206896551724E0, 3.5862068965542124E0, 1.5862068965542115E0, 0, 0, 0, 0, 0, -1E0, 0, 0,
       0, 0, 0, 0, -3.5862068965517224E0, -1.5862068965517233E0, 1.5862068965542115E0, 3.5862068965542107E0, 0, 0, 0, 0, 0, 1E0, 0, 0,
       -1.5862068965517242E0, -2.874051880513621E0, -7.761208460360094E-1, -3.586206896551725E0, 0, 0, 0, 0, 3.586206896539032E0, 7.761208460488808E-1, 2.874051880526492E0, 1.5862068965390312E0, 1E0, 0, 0, 0,
       1.223879153952218E0, -8.37769688870845E-1, -1.0193804585564388E0, -7.76120846047782E-1, 0, 0, 0, 0, 7.761208460488808E-1, 1.0193804585553246E0, 8.377696888697308E-1, -1.2238791539511193E0, 1E0, 0, -6.13521489875853E-12, 0,
       -8.740518805356893E-1, -2.3580005743472245E0, -8.377696888604038E-1, -2.8740518805356903E0, 0, 0, 0, 0, 2.8740518805264923E0, 8.377696888697308E-1, 2.3580005743565513E0, 8.740518805264913E-1, 1E0, 0, -6.13521489875853E-12, 0,
       -3.5862068965517233E0, -8.740518805136201E-1, 1.2238791539639906E0, -1.5862068965517242E0, 0, 0, 0, 0, 1.5862068965390312E0, -1.2238791539511191E0, 8.740518805264912E-1, 3.58620689653903E0, -1E0, 0, 0, 0,
       1E0, -1E0, -1E0, -1E0, 0, 0, 0, 0, 1E0, 1E0, 1E0, -1E0, 3.074703542624589E0, -8.541416497256904E-2, 5.955732643915111E-1, 1.9892863882668392E0,
       0, 0, 0, 0, -1E0, 1E0, -1E0, 1E0, 0, 0, 0, 0, -8.541416497256904E-2, 3.0976604230755704E0, 1.3190364034858493E0, 1.2249676091359045E-2,
       0, 6.13521489875853E-12, 6.13521489875853E-12, 0, 0, 0, 0, 0, 0, -6.13521489875853E-12, -6.13521489875853E-12, 0, 5.955732643915111E-1, 1.3190364034858493E0, 7.7482020369568E0, -8.54141649668102E-2,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.9892863882668392E0, 1.2249676091359045E-2, -8.54141649668102E-2, 3.0015364930810007E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -2.638039120484648E-9, -1.6540337075666244E-9,
      -5.840191026463354E-10, -6.394885122036331E-14, -1.9984022384181354E-15,
      -2.220464578090694E-16, 2.220464578101376E-16, 1.9984022384192035E-15,
      6.394884545208474E-14, 5.840191026522041E-10, 1.6540337075724932E-9,
      2.6380391204788796E-9, -3.01606595264602E1, -5.425522183449384E-1,
      3.783091433465525E0, 4.3254922651818015E0
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 12, 13, 14, 15, 1, 11, 4, 6, 8, 2, 0, 7, 5, 10, 9, 3 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        // set the specific order in which contacts are treated
        const o2 = [ 14, 15, 12, 13, 6, 7, 0, 5, 3, 9, 4, 1, 8, 10, 11, 2, 0 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o2);
        break;
      case 3:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 50 );
    } else {
      assertTrue( maxForce > 49 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 1.48 or 1.13, depending on the what contact ordering policy is
used. Checks that the default contact ordering policy finds the minimum force, and
that random contact order does not find a lower force.
*/
function testMatrix18_CF() {
  startTest(groupName+'testMatrix18_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix18_CF ***');
  const a = [
    3.586206896551724E0, -1.586206896551725E0, 0, 0, 0, 0, 0, 0, 0, 0, 1.586206896551725E0, -3.586206896551724E0, 0, 0, 0, 1E0,
    -1.586206896551725E0, 3.586206896551726E0, 0, 0, 0, 0, 0, 0, 0, 0, -3.586206896551726E0, 1.586206896551725E0, 0, 0, 0, 1E0,
    0, 0, 1.1550310893277975E0, 6.413791004629619E-1, 1.6332001835118781E0, 3.667998164881218E-1, -3.667998164881218E-1, -1.6332001835118781E0, -6.413791004629619E-1, -1.1550310893277973E0, 0, 0, -6.123233995736766E-17, -1E0, 0, 0,
    0, 0, 6.413791004629618E-1, 1.8295687667705407E0, -4.647308509708809E-1, 2.4647308509708807E0, -2.4647308509708807E0, 4.647308509708809E-1, -1.8295687667705407E0, -6.413791004629619E-1, 0, 0, -6.123233995736766E-17, -1E0, 0, 0,
    0, 0, 1.6332001835118781E0, -4.6473085097088096E-1, 3.586206896551724E0, -1.5862068965517242E0, 1.5862068965517242E0, -3.586206896551724E0, 4.6473085097088096E-1, -1.6332001835118781E0, 0, 0, 0, -1E0, 0, 0,
    0, 0, 3.6679981648812177E-1, 2.4647308509708807E0, -1.5862068965517242E0, 3.586206896551724E0, -3.586206896551724E0, 1.5862068965517242E0, -2.4647308509708807E0, -3.66799816488122E-1, 0, 0, 0, -1E0, 0, 0,
    0, 0, -3.6679981648812177E-1, -2.4647308509708807E0, 1.5862068965517242E0, -3.586206896551724E0, 3.586206896551724E0, -1.5862068965517242E0, 2.4647308509708807E0, 3.66799816488122E-1, 0, 0, 0, 1E0, 0, 0,
    0, 0, -1.6332001835118781E0, 4.6473085097088096E-1, -3.586206896551724E0, 1.5862068965517242E0, -1.5862068965517242E0, 3.586206896551724E0, -4.6473085097088096E-1, 1.6332001835118781E0, 0, 0, 0, 1E0, 0, 0,
    0, 0, -6.413791004629618E-1, -1.8295687667705407E0, 4.64730850970881E-1, -2.4647308509708807E0, 2.4647308509708807E0, -4.64730850970881E-1, 1.8295687667705407E0, 6.413791004629619E-1, 0, 0, 6.123233995736766E-17, 1E0, 0, 0,
    0, 0, -1.1550310893277975E0, -6.413791004629619E-1, -1.6332001835118781E0, -3.6679981648812193E-1, 3.6679981648812193E-1, 1.6332001835118781E0, 6.413791004629619E-1, 1.1550310893277973E0, 0, 0, 6.123233995736766E-17, 1E0, 0, 0,
    1.586206896551725E0, -3.586206896551726E0, 0, 0, 0, 0, 0, 0, 0, 0, 3.586206896551726E0, -1.586206896551725E0, 0, 0, 0, -1E0,
    -3.586206896551724E0, 1.586206896551725E0, 0, 0, 0, 0, 0, 0, 0, 0, -1.586206896551725E0, 3.586206896551724E0, 0, 0, 0, -1E0,
    0, 0, -6.123233995736766E-17, -6.123233995736766E-17, 0, 0, 0, 0, 6.123233995736766E-17, 6.123233995736766E-17, 0, 0, 3.0986387998227323E0, -6.203518189121915E-3, 4.325570099261159E-2, 1.3122144080438458E0,
    0, 0, -1E0, -1E0, -1E0, -1E0, 1E0, 1E0, 1E0, 1E0, 0, 0, -6.203518189121915E-3, 3.0003901470617236E0, 1.9972795945573838E0, 4.325570097754454E-2,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.325570099261159E-2, 1.9972795945573838E0, 3.018968759471169E0, -3.016120225119102E-1,
    1E0, 1E0, 0, 0, 0, 0, 0, 0, 0, 0, -1E0, -1E0, 1.3122144080438458E0, 4.325570097754454E-2, -3.016120225119102E-1, 7.795770238005858E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -4.109840485099998E-10, -4.1098397946800547E-10,
    -7.918240297620283E-11, -7.918097625963677E-11, -7.91788615053803E-11, -7.9175343959606E-11,
    7.9175343959606E-11, 7.91788615053803E-11, 7.918097625963677E-11, 7.918240297620283E-11,
    4.1098397946800547E-10, 4.109840485099998E-10, -2.404079701283457E0, 2.7018865568001954E-2,
    8.368861113133583E-1, 3.556984289290667E0
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 15, 14, 13, 12, 8, 0, 4, 5, 7, 10, 9, 11, 2, 3, 1, 6 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 1.135 );
    } else {
      assertTrue( maxForce > 1.130 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 6.3 or 249 or 7.46, depending on the what contact ordering
policy is used (condition number, or min-accel).
Checks that the default contact ordering policy finds the minimum force, and
that random contact order does not find a lower force.

**TO DO**  figure out why there is an ordering that results in a huge force
of 135701.
*/
function testMatrix19_CF() {
  startTest(groupName+'testMatrix19_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix19_CF ***');
  const a = [
    3.58620689655037E0, -1.5862068965517238E0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5862068965503702E0, -3.586206896551724E0, 0, 0, -1E0, 0,
    -1.5862068965517238E0, 3.586206896553078E0, 0, 0, 0, 0, 0, 0, 0, 0, -3.586206896551724E0, 1.5862068965530782E0, 0, 0, -1E0, 0,
    0, 0, 3.5862068965500393E0, 3.521473773241473E0, -1.4235427387576882E0, 1.5862068965500393E0, -1.5862068965517242E0, 1.4235427387593973E0, -3.5214737732397636E0, -3.586206896551724E0, 0, 0, 0, 0, 0, -1E0,
    0, 0, 3.5214737732414734E0, 3.4583609291375104E0, -1.4129414042816943E0, 1.5214737732414731E0, -1.5214737732431158E0, 1.4129414042833608E0, -3.458360929135844E0, -3.521473773243116E0, 0, 0, 8.145820755449296E-13, 0, 0, -1E0,
    0, 0, -1.423542738757688E0, -1.4129414042816943E0, 1.0693635346010655E0, 5.764572612423119E-1, -5.764572612420358E-1, -1.0693635346013455E0, 1.4129414042814143E0, 1.4235427387579642E0, 0, 0, -8.145820755449296E-13, 0, 0, 1E0,
    0, 0, 1.5862068965500393E0, 1.521473773241473E0, 5.764572612423118E-1, 3.5862068965500393E0, -3.586206896551724E0, -5.764572612406027E-1, -1.5214737732397636E0, -1.5862068965517242E0, 0, 0, 0, 0, 0, 1E0,
    0, 0, -1.5862068965517242E0, -1.521473773243116E0, -5.764572612420358E-1, -3.586206896551724E0, 3.5862068965534095E0, 5.764572612403267E-1, 1.5214737732414068E0, 1.5862068965534095E0, 0, 0, 0, 0, 0, -1E0,
    0, 0, 1.4235427387593973E0, 1.4129414042833606E0, -1.0693635346013457E0, -5.764572612406027E-1, 5.764572612403267E-1, 1.0693635346016257E0, -1.4129414042830808E0, -1.4235427387596733E0, 0, 0, 8.145820755449296E-13, 0, 0, -1E0,
    0, 0, -3.5214737732397636E0, -3.4583609291358437E0, 1.4129414042814141E0, -1.5214737732397638E0, 1.5214737732414065E0, -1.4129414042830806E0, 3.458360929134178E0, 3.5214737732414063E0, 0, 0, -8.145820755449296E-13, 0, 0, 1E0,
    0, 0, -3.586206896551724E0, -3.521473773243116E0, 1.4235427387579642E0, -1.5862068965517242E0, 1.5862068965534095E0, -1.4235427387596733E0, 3.5214737732414068E0, 3.5862068965534095E0, 0, 0, 0, 0, 0, 1E0,
    1.5862068965503702E0, -3.586206896551724E0, 0, 0, 0, 0, 0, 0, 0, 0, 3.586206896550371E0, -1.5862068965517246E0, 0, 0, 1E0, 0,
    -3.586206896551724E0, 1.5862068965530782E0, 0, 0, 0, 0, 0, 0, 0, 0, -1.5862068965517246E0, 3.5862068965530787E0, 0, 0, 1E0, 0,
    0, 0, 0, 8.145820755449296E-13, -8.145820755449296E-13, 0, 0, 8.145820755449296E-13, -8.145820755449296E-13, 0, 0, 0, 7.576798867938808E0, -1.4965958882325694E-1, 1.3436181964875642E0, 1.0435417801446258E0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4965958882325694E-1, 3.0048938118482E0, 2.1463436270464566E-2, 1.9658765791893604E0,
    -1E0, -1E0, 0, 0, 0, 0, 0, 0, 0, 0, 1E0, 1E0, 1.3436181964875642E0, 2.1463436270464566E-2, 3.0941350241541787E0, -1.496595886024558E-1,
    0, 0, -1E0, -1E0, 1E0, 1E0, -1E0, -1E0, 1E0, 1E0, 0, 0, 1.0435417801446258E0, 1.9658765791893604E0, -1.496595886024558E-1, 3.2379347396137255E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -9.802835414341164E-10, -9.802833573221373E-10,
    -2.0749740176094107E-10, -6.827922471993871E-11, -1.588176623987044E-11,
    -1.1046713335701318E-16, 1.1046720536256166E-16, 1.5881766239797517E-11,
    6.827922471986578E-11, 2.0749740176101307E-10, 9.802833573221373E-10, 9.802835414341164E-10,
    -3.8765249595272606E0, -1.0001151174251222E-1, 2.8926563999698773E0, 3.0548386435724364E0
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 12, 13, 14, 15, 4, 5, 10, 11, 2, 3, 7, 0, 1, 6, 8, 9 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      case 3:
        // this gives a huge maxForce of 135701
        const o2 = [ 12, 14, 15, 13, 0, 7, 3, 6, 8, 11, 9, 1, 2, 10, 5, 4, 6 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o2);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 6.3 );
    } else {
      assertTrue( maxForce > 6.2 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 6.4 or 1.9, depending on the what contact ordering policy
is used.
Checks that the default contact ordering policy finds the minimum force, and
that random contact order does not find a lower force.
*/
function testMatrix20_CF() {
  startTest(groupName+'testMatrix20_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix20_CF ***');
  const a = [
    3.586206896550237E0, 1.586206896550237E0, 1.2942338775898112E0, 0, 0, 8.036971568938533E-1, -8.036971568923449E-1, 0, 0, -1.2942338775883022E0, -1.5862068965517242E0, -3.586206896551724E0, 0, 1E0, 0, 0,
    1.586206896550237E0, 3.586206896550237E0, 3.2942338775898112E0, 0, 0, -1.1963028431061467E0, 1.1963028431076552E0, 0, 0, -3.294233877588302E0, -3.586206896551724E0, -1.5862068965517242E0, 0, -1E0, 0, 0,
    1.2942338775898112E0, 3.2942338775898112E0, 3.0352235128990728E0, 0, 0, -1.1741409913963436E0, 1.1741409913976817E0, 0, 0, -3.035223512897734E0, -3.2942338775911306E0, -1.2942338775911306E0, 0, -1E0, 0, 7.191028954271661E-13,
    0, 0, 0, 3.586206896551726E0, -1.586206896551725E0, 0, 0, 1.586206896551725E0, -3.586206896551726E0, 0, 0, 0, 0, 0, 1E0, 0,
    0, 0, 0, -1.586206896551725E0, 3.586206896551724E0, 0, 0, -3.586206896551724E0, 1.586206896551725E0, 0, 0, 0, 0, 0, 1E0, 0,
    8.036971568938533E-1, -1.1963028431061467E0, -1.1741409913963436E0, 0, 0, 1.014900125068477E0, -1.0149001250685916E0, 0, 0, 1.174140991396229E0, 1.1963028431062597E0, -8.036971568937403E-1, 0, 1E0, 0, -7.191028954271661E-13,
    -8.036971568923449E-1, 1.196302843107655E0, 1.1741409913976817E0, 0, 0, -1.0149001250685914E0, 1.014900125068706E0, 0, 0, -1.1741409913975671E0, -1.196302843107768E0, 8.03697156892232E-1, 0, -1E0, 0, 7.191028954271661E-13,
    0, 0, 0, 1.586206896551725E0, -3.586206896551724E0, 0, 0, 3.586206896551724E0, -1.586206896551725E0, 0, 0, 0, 0, 0, -1E0, 0,
    0, 0, 0, -3.586206896551726E0, 1.586206896551725E0, 0, 0, -1.586206896551725E0, 3.586206896551726E0, 0, 0, 0, 0, 0, -1E0, 0,
    -1.2942338775883022E0, -3.294233877588302E0, -3.0352235128977343E0, 0, 0, 1.174140991396229E0, -1.1741409913975673E0, 0, 0, 3.0352235128963954E0, 3.294233877589622E0, 1.294233877589622E0, 0, 1E0, 0, -7.191028954271661E-13,
    -1.5862068965517242E0, -3.586206896551724E0, -3.2942338775911306E0, 0, 0, 1.1963028431062597E0, -1.196302843107768E0, 0, 0, 3.294233877589622E0, 3.586206896553212E0, 1.586206896553212E0, 0, 1E0, 0, 0,
    -3.586206896551724E0, -1.5862068965517242E0, -1.2942338775911306E0, 0, 0, -8.036971568937404E-1, 8.03697156892232E-1, 0, 0, 1.294233877589622E0, 1.586206896553212E0, 3.586206896553212E0, 0, -1E0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.003499916627209E0, 1.9755958889466059E0, 1.8285938513485908E-2, -1.2750363009056684E-1,
    1E0, -1E0, -1E0, 0, 0, 1E0, -1E0, 0, 0, 1E0, 1E0, -1E0, 1.9755958889466059E0, 3.170164235249606E0, -1.2750362986632482E-1, 8.890533918010681E-1,
    0, 0, 0, 1E0, 1E0, 0, 0, -1E0, -1E0, 0, 0, 0, 1.8285938513485908E-2, -1.2750362986632482E-1, 3.0955381464574026E0, 1.3338345485270449E0,
    0, 0, 7.191028954271661E-13, 0, 0, -7.191028954271661E-13, 7.191028954271661E-13, 0, 0, -7.191028954271661E-13, 0, 0, -1.2750363009056684E-1, 8.890533918010681E-1, 1.3338345485270449E0, 7.6450179869674635E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -1.5740438009726838E-9, -1.287890877406221E-9,
    -9.195010270075594E-10, -5.852012398803241E-10, -5.852012330480435E-10,
    -2.4129967854526093E-10, 2.41299678543599E-10, 5.852012330480435E-10, 5.852012398803241E-10,
    9.195010270058973E-10, 1.2878908774078831E-9, 1.5740438009743458E-9, -4.366768028062232E0,
    -2.078376190930253E0, -2.6440020599753483E-1, 1.762811379370378E0
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 12, 13, 14, 15, 0, 10, 7, 8, 9, 5, 3, 4, 1, 11, 2, 6 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 1.93 );
    } else {
      assertTrue( maxForce > 1.92 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** From DoNothingGrinder, this is a matrix that can be solved two different ways,
with max force either 8.4 or 23.8 or 10.1, depending on the what contact ordering
policy is used.
Checks that the default contact ordering policy finds the minimum force, and
that random contact order does not find a lower force.
*/
function testMatrix21_CF() {
  startTest(groupName+'testMatrix21_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix21_CF ***');
  const a = [
    2.078562005204573E0, 7.237403386582231E-1, -2.670145052455683E0, 6.701450524416293E-1, 0, 0, 0, 0, 2.6701450524416295E0, -6.701450524556825E-1, -2.078562005190323E0, -7.237403386439727E-1, -1E0, 0, 1.0518375399978647E-11, 0,
    7.237403386582232E-1, 1.0707603272842876E0, -5.722140179640969E-1, -1.4277859820323031E0, 0, 0, 0, 0, 5.722140179676967E-1, 1.427785982035903E0, -7.237403386618733E-1, -1.0707603272879378E0, -1E0, 0, 1.0518375399978647E-11, 0,
    -2.670145052455683E0, -5.722140179640969E-1, 3.5862068965734872E0, -1.5862068965517242E0, 0, 0, 0, 0, -3.586206896551725E0, 1.5862068965734863E0, 2.6701450524336163E0, 5.722140179420303E-1, 1E0, 0, 0, 0,
    6.701450524416293E-1, -1.4277859820323031E0, -1.5862068965517242E0, 3.5862068965299616E0, 0, 0, 0, 0, 1.5862068965299625E0, -3.5862068965517233E0, -6.701450524195622E-1, 1.42778598205437E0, 1E0, 0, 0, 0,
    0, 0, 0, 0, 3.5862068965580414E0, 1.5862068965580405E0, -3.586206896551724E0, -1.5862068965517246E0, 0, 0, 0, 0, 0, -1E0, 0, 0,
    0, 0, 0, 0, 1.5862068965580405E0, 3.58620689655804E0, -1.5862068965517238E0, -3.586206896551724E0, 0, 0, 0, 0, 0, 1E0, 0, 0,
    0, 0, 0, 0, -3.586206896551724E0, -1.5862068965517238E0, 3.5862068965454075E0, 1.586206896545408E0, 0, 0, 0, 0, 0, 1E0, 0, 0,
    0, 0, 0, 0, -1.5862068965517246E0, -3.586206896551724E0, 1.586206896545408E0, 3.5862068965454084E0, 0, 0, 0, 0, 0, -1E0, 0, 0,
    2.6701450524416295E0, 5.722140179676967E-1, -3.586206896551725E0, 1.5862068965299625E0, 0, 0, 0, 0, 3.5862068965299634E0, -1.5862068965517242E0, -2.6701450524195627E0, -5.722140179456299E-1, -1E0, 0, 0, 0,
    -6.701450524556827E-1, 1.427785982035903E0, 1.5862068965734863E0, -3.5862068965517233E0, 0, 0, 0, 0, -1.5862068965517242E0, 3.5862068965734855E0, 6.701450524336159E-1, -1.4277859820579697E0, -1E0, 0, 0, 0,
    -2.078562005190323E0, -7.237403386618733E-1, 2.6701450524336163E0, -6.701450524195625E-1, 0, 0, 0, 0, -2.6701450524195627E0, 6.701450524336161E-1, 2.0785620051760723E0, 7.237403386476229E-1, 1E0, 0, -1.0518375399978647E-11, 0,
    -7.237403386439726E-1, -1.0707603272879378E0, 5.722140179420302E-1, 1.42778598205437E0, 0, 0, 0, 0, -5.722140179456299E-1, -1.4277859820579697E0, 7.237403386476228E-1, 1.070760327291588E0, 1E0, 0, -1.0518375399978647E-11, 0,
    -1E0, -1E0, 1E0, 1E0, 0, 0, 0, 0, -1E0, -1E0, 1E0, 1E0, 3.0423425158363915E0, 6.446907035584792E-2, -4.4952795205048696E-1, 1.993927446350773E0,
    0, 0, 0, 0, -1E0, 1E0, 1E0, -1E0, 0, 0, 0, 0, 6.446907035584792E-2, 3.098158103042501E0, 1.3155661964054726E0, -9.245834375179108E-3,
    1.0518375399978647E-11, 1.0518375399978647E-11, 0, 0, 0, 0, 0, 0, 0, 0, -1.0518375399978647E-11, -1.0518375399978647E-11, -4.4952795205048696E-1, 1.3155661964054726E0, 7.772398986765666E0, 6.446906972182279E-2,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.993927446350773E0, -9.245834375179108E-3, 6.446906972182279E-2, 3.000870895531225E0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -2.0087562035464356E-9, -2.0087562035464356E-9,
    -8.230447094902625E-24, -8.230447094902625E-24, -5.1440294343204224E-24,
    -5.144029434320422E-24, 5.1440294343078586E-24, 5.144029434307859E-24, 8.230447094902625E-24,
    8.230447094902625E-24, 2.0087562035464356E-9, 2.0087562035464356E-9, -2.5651362656358345E0,
    -5.59276608081908E-1, 6.85598912214008E-1, 4.83970180002438E0
    ];
  const n = A.length;
  const joint = [ false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        const o = [ 12, 13, 14, 15, 8, 9, 4, 1, 7, 6, 2, 5, 3, 0, 11, 10, 1, 1, 5, 0, 0, 0, 3, 2, 10, 2 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        // set the specific order in which contacts are treated
        const o2 = [ 12, 14, 13, 15, 5, 7, 11, 0, 10, 2, 1, 3, -3, 4, 6, 8, 9, 5, 3, -3, 10, -10, 11, -11, 3, -3, 10, -10, 11, -11 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED,
            o2.filter(x => x > -1));
        break;
      case 3:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 8.5 );
    } else {
      assertTrue( maxForce > 8.4 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** Test of finding contact force in Pile simulation (random seed 3 num blocks 12).
Shows that the minAccel policy does not find the smallest force, it finds
maxForce = 10.83, length=25.48, but a randomly selected order gets
maxForce=9.46, length = 24.00.
*/
function testMatrix22_CF() {
  startTest(groupName+'testMatrix22_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix22_CF ***');
  const n = 44;
  const a = [
    1.423698997455812E1, 1.4430146816633396E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.888364479898706E0, 0, 0, 0, 0, 0, 5.851221032058561E0, 0, -1.446735175025391E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1.4430146816633394E1, 3.099059926775411E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.298377612022811E0, 0, 0, 0, 0, 0, 4.250625072468184E0, 0, -3.1038458595165892E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1.1728970420438674E1, 0, 0, 0, 0, 0, -3.6289045193184446E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.4406504857644E0, 0, 8.856804711317096E0, 0, 0, 0, 0, 1.511587861551819E0, 0, 0, 0, 0, 0, -8.76274381473226E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 4.136372403996331E0, -1.0362861833125212E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2219705867772885E0, 0, 0, -3.183227249243412E0, -1.2231977092230704E0, 0, -3.8881227137639782E0, 0, 0, 3.1820101402306893E0, 0, 0, 0, 0, -2.0984362404268446E0,
    0, 0, 0, -1.0362861833125214E0, 3.6122917696558963E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0938022819619977E0, 0, 0, 2.8650720944046686E0, 1.1013046226051506E0, 0, 8.131888824737485E-1, 0, 0, -2.857578752658961E0, 0, 0, 0, 0, -7.951711015183774E-1,
    0, 0, 0, 0, 0, 3.903397540857193E0, 0, 2.935268375563308E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.266005023295057E-1, 0, 0, 0, 0, 0, 0, 0, 0, 7.56647828197488E-1, 0, -3.8614537447327E0, 0, 0, 0, -1.6689014750748403E0, 0, -1.566307064166864E0, 0,
    0, 0, 0, 0, 0, 0, 7.131687863293411E0, 0, 0, 0, 0, 0, 0, -2.457568258635335E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.427242245496157E0, 0, 0, 0, 0, 0, -2.154245336827284E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 2.9352683755633078E0, 0, 3.788716236180092E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.821290929361566E-1, 0, 0, 0, 0, 0, 0, 0, 0, -6.922621250485412E-1, 0, -2.972044732469972E0, 0, 0, 0, 1.4891169581080916E0, 0, 1.3986755339267718E0, 0,
    0, 0, -3.6289045193184455E0, 0, 0, 0, 0, 0, 2.095801432521537E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.097664638068897E0, 0, -1.4190661582318837E1, 0, 0, 0, 0, -2.4082120982500497E0, 0, 0, 0, 0, 0, 1.4040297874485459E1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 5.432122478708493E0, 0, 3.379590898402978E0, 0, 0, 0, 0, 0, 0, 0, -5.3810837608555655E0, 0, 0, -3.328627160059442E0, 0, 2.679683272076949E0, 0, -3.025138593813561E-1, 0, 0, 0, 0, 0, 0, 2.8364688645738534E-1, 0, 0, 0, 0, -5.723114803061301E0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5768514814744714E0, 0, 0, 0, 0, 5.908550444829057E-1, 0, 0, 0, 0, 0, 0, 0, 2.9629842766826103E-1, 0, 0, 0, 3.938391951518884E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.752438168098988E-1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 3.379590898402978E0, 0, 6.746683599532717E0, 0, 0, 0, 0, 0, 0, 0, -3.4627815224513814E0, 0, 0, -6.829751222814053E0, 0, -4.386565058191143E0, 0, 5.056053186313525E-1, 0, 0, 0, 0, 0, 0, -4.7465483414952025E-1, 0, 0, 0, 0, 9.379187920948851E0, 0, 0, 0, 0, 0,
    -5.888364479898705E0, -4.2983776120228105E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0101639285332938E1, 0, 0, 0, 0, 0, -1.008214234269518E1, 0, 4.317918130504456E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, -2.4575682586353365E0, 0, 0, 0, 0, 0, 0, 4.054727692820515E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0908308345445086E1, 0, 0, 0, 0, 0, 9.638245182590474E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.8142908517663408E0, 0, 0, 0, 0, 0, 0, 0, 0, -2.1375222941168506E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.2208661301048669E0, 0, 0, 0, 0, 1.233715103402846E0, 0, -1.1501123854625837E0, 2.117998067001566E0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.908550444829053E-1, 0, 0, 0, 0, 1.0132252416652229E1, 0, 0, 0, 0, 0, 0, 0, -2.8923962432046086E0, 0, 0, 0, -4.328252602226376E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.6060566582224696E0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.665967307441097E0, 3.050521991009302E0, -1.976193004004351E0, 0, 1.0441897197708587E0, 0, 0, 0, 0, -4.664995845216517E0, 0, 0, 0, 1.9845090176544966E0, 0, 0, -2.64504756673853E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.050521991009302E0, 5.1495022657617096E0, 2.5825317837604476E0, 0, -1.3419116467422567E0, 0, 0, 0, 0, -3.0517482900995336E0, 0, 0, 0, -2.5933369459276086E0, 0, 0, 3.4219381318786994E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    5.851221032058561E0, 4.250625072468183E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0082142342695178E1, 0, 0, 0, -1.9761930040043516E0, 2.5825317837604476E0, 1.962107966403074E1, 0, -3.2351354450900147E0, 0, 0, 0, 0, 1.9846269536963443E0, 0, 0, 0, -9.581795031034833E0, 0, 0, 3.4826362703284404E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, -5.381083760855565E0, 0, -3.4627815224513805E0, 0, 0, 0, 0, 0, 0, 0, 1.0426004593797717E1, 0, 0, 6.110181419630759E0, 0, -2.46118913112773E0, 0, 3.2598135020901975E-1, 0, 7.416207394217174E-1, 0, -2.790625325186885E0, 0, 0, -3.0834822010800633E-1, 0, 0, 0, 0, 5.3055894679294475E0, 0, 0, 0, 0, 0,
    -1.446735175025391E1, -3.1038458595165892E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.317918130504457E0, 0, 0, 0, 1.044189719770858E0, -1.3419116467422572E0, -3.235135445090016E0, 0, 3.6582619273825664E1, 0, 0, 0, 0, -1.0316466366784842E0, 0, 0, 0, -1.0226400290888074E0, 0, 0, -7.8607491127003595E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.7213885114025736E1, 0, 0, 0, 0, 0, -1.1561362525501366E0, -9.887076968798644E0, 0, 2.356863741188998E1, 0, 0, 0, 0, -4.315721414418213E0, -6.996809284240575E-1, 0, 0, 0, -5.565434225875394E-1, -5.598665434098225E0, 0, -3.134551835591598E1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, -3.328627160059442E0, 0, -6.8297512228140524E0, 0, 0, 0, 0, 0, 0, 0, 6.110181419630758E0, 0, 0, 1.0840304672539332E1, 0, 4.604801067261597E0, 0, -4.821083070011447E-1, 0, -3.725393798422323E-1, 0, 1.4306164647164776E0, 0, 0, 4.499257995409556E-1, 0, 0, 0, 0, -9.796161565056899E0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.96298427668261E-1, 0, 0, 0, -2.13752229411685E0, -2.892396243204608E0, 0, 0, 0, 0, 0, 0, 0, 1.5779043222672172E1, 0, 0, 0, 2.9140855537591857E0, 0, 0, 0, 0, 0, 0, 2.3909384532369033E0, 0, 0, 0, 0, -2.0855334340036804E0, 0, -1.0277156300204904E1, -1.3256895500651645E1, 0,
    0, 0, -4.440650485764402E0, 0, 0, 0, 0, 0, 7.097664638068893E0, 2.679683272076948E0, 0, -4.386565058191143E0, 0, 0, 0, 0, 0, 0, 0, -2.46118913112773E0, 0, 0, 4.604801067261597E0, 0, 2.3025074053373654E1, 0, 2.76793777313601E0, 0, 0, 0, 0, -6.956472743746158E0, 0, -3.666089695215481E0, 0, 0, 0, 7.625949679500863E-1, -2.434556189732497E1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 5.26600502329506E-1, 0, -4.821290929361566E-1, 0, 0, 0, 0, 0, 0, 0, 0, -4.6649958452165174E0, -3.0517482900995345E0, 1.984626953696346E0, 0, -1.0316466366784853E0, 0, 0, 0, 0, 8.611515931476989E0, 0, 0, 0, -1.9929316536778008E0, 0, 0, 2.6303265681136443E0, 0, -2.5864212275508502E0, 0, -4.5624005456471184E-1, 0, 0, 0, -5.137664631006443E0, 0, -5.030767718588454E0, 0,
    0, 0, 8.856804711317094E0, 0, 0, 0, 0, 0, -1.4190661582318839E1, -3.0251385938135655E-1, 0, 5.056053186313525E-1, 0, 0, 0, 0, 0, 0, 0, 3.2598135020901964E-1, 0, 0, -4.8210830700114493E-1, 0, 2.767937773136009E0, 0, 2.389749061092735E1, 0, 0, 0, 0, -3.562554994614421E0, 0, -4.767853603587213E0, 0, 0, 0, -1.8981179897321056E1, -2.402881797243783E0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.938391951518885E-1, 0, 0, 0, 0, -4.328252602226377E0, 0, 0, 0, 0, 0, -1.1561362525501364E0, 0, 2.914085553759186E0, 0, 0, 0, 7.364788380170566E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.0203572748884366E-1, -4.53167164134022E0, -2.364985272788232E0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.416207394217168E-1, 0, -9.887076968798645E0, -3.725393798422325E-1, 0, 0, 0, 0, 0, 1.5364943583337077E1, 0, -3.4953369914948773E-1, 0, 0, 0, 0, -1.2758439128852457E0, -7.062869175052256E0, 0, 0, 0, 0, 0, 0, 1.009238138586271E1,
    0, 0, 0, 1.2219705867772885E0, -1.0938022819619972E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.9845090176544973E0, -2.5933369459276094E0, -9.581795031034833E0, 0, -1.0226400290888074E0, 0, 0, 0, 0, -1.9929316536778023E0, 0, 0, 0, 1.1563434018792798E1, 0, 0, -3.5279795112688106E0, -1.9601274018631154E0, 0, -1.1115634184949998E0, 0, 0, 1.2061685572830383E-2, 0, 0, 0, 0, -3.1032991186604814E-1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.790625325186885E0, 0, 2.356863741188998E1, 1.4306164647164774E0, 0, 0, 0, 0, 0, -3.4953369914948784E-1, 0, 4.093614496285313E1, 0, 0, 0, 0, 3.383064376837781E0, -8.535860702273451E0, 0, 0, 0, 0, 0, 0, -2.494637946018011E1,
    0, 0, 1.5115878615518188E0, 0, 0, 0, 2.427242245496156E0, 0, -2.4082120982500483E0, 0, 0, 0, 0, -1.0908308345445088E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.956472743746159E0, 0, -3.562554994614422E0, 0, 0, 0, 0, 1.4973493638414187E1, 0, 0, 0, 0, 0, 5.9798036858758215E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, -3.1832272492434113E0, 2.8650720944046686E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.64504756673853E0, 3.4219381318787E0, 3.48263627032844E0, 0, -7.8607491127003595E0, 0, 0, 0, 0, 2.6303265681136447E0, 0, 0, 0, -3.52797951126881E0, 0, 0, 1.9009759307286526E1, 1.9491486404204172E-2, 0, 2.892220577807805E0, 0, 0, -5.131441113295261E0, 0, 0, 0, 0, 7.995714421043684E-1,
    0, 0, 0, -1.2231977092230706E0, 1.1013046226051508E0, 0, 0, 0, 0, 2.8364688645738556E-1, 0, -4.746548341495207E-1, 0, 0, 0, 0, 0, 0, 0, -3.08348220108007E-1, 0, 0, 4.4992579954095513E-1, 0, -3.666089695215482E0, 0, -4.767853603587213E0, 0, 0, -1.9601274018631154E0, 0, 0, 1.9491486404204172E-2, 6.723080780882198E0, 0, 1.1123715922430912E0, 0, 0, 2.5242770555815763E0, 0, 0, 0, 0, 3.0811778150048874E-1,
    0, 0, 0, 0, 0, 7.566478281974882E-1, 0, -6.922621250485421E-1, 0, 0, 0, 0, 0, 0, -1.2208661301048662E0, 0, 0, 0, 0, 0, 0, 0, 0, 2.390938453236905E0, 0, -2.5864212275508502E0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1203964147986238E1, 0, -7.208010472032791E-1, 0, 0, -6.647154260164074E0, 8.768443360098152E-1, -5.9082933906749915E0, -1.319221853512467E0, 0,
    0, 0, 0, -3.8881227137639782E0, 8.131888824737488E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.315721414418215E0, 0, 0, 0, 0, 0, 0, -1.2758439128852475E0, -1.1115634184949998E0, 3.3830643768377806E0, 0, 2.8922205778078056E0, 1.1123715922430915E0, 0, 1.1586749081817445E1, -1.9453471429443292E-1, 0, -2.891421505040992E0, 0, 0, 0, 0, 6.206016607484574E0,
    0, 0, 0, 0, 0, -3.8614537447327E0, 0, -2.9720447324699717E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.996809284240602E-1, 0, 0, 0, -4.562400545647116E-1, 0, 0, -7.062869175052256E0, 0, -8.535860702273451E0, 0, 0, 0, -7.208010472032788E-1, -1.9453471429443292E-1, 1.1351959529214687E1, 0, 0, 0, 1.5056586820551585E0, 0, 1.4114063891375705E0, 9.951585451229086E-1,
    0, 0, -8.76274381473226E0, 0, 0, 0, -2.1542453368272843E0, 0, 1.4040297874485457E1, 0, 0, 0, 0, 9.638245182590472E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.625949679500879E-1, 0, -1.8981179897321056E1, 0, 0, 0, 0, 5.979803685875821E0, 0, 0, 0, 0, 0, 2.686904337850448E1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 3.182010140230689E0, -2.857578752658961E0, 0, 0, 0, 0, -5.723114803061301E0, 0, 9.379187920948848E0, 0, 0, 0, 0, 0, 0, 0, 5.30558946792944E0, 0, 0, -9.7961615650569E0, 0, -2.434556189732497E1, 0, -2.402881797243783E0, 0, 0, 1.2061685572830383E-2, 0, 0, -5.131441113295261E0, 2.5242770555815772E0, 0, -2.8914215050409924E0, 0, 0, 5.1864886634223375E1, 0, 0, 0, 0, -8.017860953811167E-1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.752438168098988E-1, 0, 0, 0, 1.2337151034028464E0, 3.606056658222469E0, 0, 0, 0, 0, 0, 0, 0, -2.0855334340036786E0, 0, 0, 0, -3.0203572748884366E-1, 0, 0, 0, 0, 0, 0, -6.647154260164075E0, 0, 0, 0, 0, 9.62203225566291E0, 0, 5.86216640728629E0, 2.3229618257167797E0, 0,
    0, 0, 0, 0, 0, -1.6689014750748405E0, 0, 1.4891169581080914E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.565434225875394E-1, 0, 0, 0, -5.137664631006443E0, 0, -4.53167164134022E0, 0, 0, 0, 0, 0, 0, 8.768443360098157E-1, 0, 1.505658682055159E0, 0, 0, 0, 1.4901788780209323E1, 4.808487521891047E0, 8.529167134070601E0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.1501123854625832E0, 0, 0, 0, 0, 0, 0, -5.5986654340982245E0, 0, -1.0277156300204906E1, 0, 0, 0, -2.3649852727882337E0, 0, 0, 0, 0, 0, 0, -5.9082933906749915E0, 0, 0, 0, 0, 5.86216640728629E0, 4.808487521891047E0, 2.4414418065974118E1, 1.0207409719119422E1, 0,
    0, 0, 0, 0, 0, -1.5663070641668646E0, 0, 1.3986755339267716E0, 0, 0, 0, 0, 0, 0, 2.1179980670015657E0, 0, 0, 0, 0, 0, 0, 0, 0, -1.3256895500651645E1, 0, -5.030767718588454E0, 0, 0, 0, 0, 0, 0, 0, 0, -1.3192218535124667E0, 0, 1.4114063891375705E0, 0, 0, 2.322961825716781E0, 8.529167134070601E0, 1.0207409719119422E1, 2.1400574758500536E1, 0,
    0, 0, 0, -2.098436240426845E0, -7.951711015183778E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.1345518355915978E1, 0, 0, 0, 0, 0, 0, 1.0092381385862708E1, -3.103299118660482E-1, -2.4946379460180108E1, 0, 7.995714421043685E-1, 3.0811778150048874E-1, 0, 6.206016607484574E0, 9.951585451229072E-1, 0, -8.017860953811171E-1, 0, 0, 0, 0, 3.406347913230373E1
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [
    -7.071067811865543E0, -7.07106781186552E0, -7.071067811865481E0,
    -7.07106781186548E0, -7.071067811865479E0, -7.071067811865479E0,
    -7.071067811865479E0, -7.071067811865477E0, -7.071067811865475E0,
    -7.071067811865475E0, -7.071067811865475E0, -7.071067811865471E0,
    -7.07106781186547E0, -7.07106781186547E0, -7.0710678118654675E0,
    -7.071067811865464E0, -7.071067811865459E0, -7.071067811865459E0,
    -6.661338147750939E-14, -5.240252676230739E-14, -1.7763568394002505E-14,
    -1.509903313490213E-14, -1.509903313490213E-14, -1.4210854715202004E-14,
    -7.105427357601002E-15, -6.217248937900877E-15, -6.217248937900877E-15,
    -5.329070518200751E-15, -5.329070518200751E-15, 0, 1.7763568394002505E-15,
    1.7763568394002505E-15, 2.6645352591003757E-15, 2.6645352591003757E-15,
    2.6645352591003757E-15, 5.329070518200751E-15, 8.881784197001252E-15,
    8.881784197001252E-15, 1.2434497875801753E-14, 1.4210854715202004E-14,
    1.9539925233402755E-14, 2.1316282072803006E-14, 3.019806626980426E-14,
    4.707345624410664E-14
    ];
  const joint = new Array(n);
  for (let i=0; i<n; i++) {
    joint[i] = false;
  }
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        // This gives maxForce=10.8364728 length=25.4836362
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        // this gives maxForce=10.0192409 length=24.5573210
        const o = [ 20, 15, 29, 5, 13, 28, 33, 25, 16, 38, 27, 31, 12, 40, 9, 14, 24, 41,
          21, 10, 35, 37, 19, 32, 0, 2, 6, 39, 7, 1, 4, 43, 17, 22, 36, 26, 8, 34, 30,
          11, 42, 18, 23, 3 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED, o);
        break;
      case 2:
        // set the specific order in which contacts are treated
        // Negative numbers are rejects, so ignore those.
        // This gives maxForce=9.4596439 length=24.0006861
        const o2 = [ 28, 20, 33, 3, 25, 4, 36, 16, 43, 7, 39, 29, 42, 27, 17, 14, 24,
          21, 37, 13, 12, 6, 8, 0, 30, 26, 1, 2, 40, 18, 41, -41, 35, -35, 10, -10, 5,
          -5, 19, -19, 9, -9, 38, -38, 22, 11, -11, 32, 23, -23, 31, -31, 15, -15, 34,
          -34, 41, 35, 10, 5, 19, 9, 38, 23, 31, 15, 34, -30, 34 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED,
            o2.filter(x => x > -1));
        break;
      case 3:
        // set the specific order in which contacts are treated
        // this gives maxForce=10.8382509 length=25.5588426
        // correction:  now gives maxForce=10.0192409 length=24.3128044
        // this is just a random order that I'm investigating to watch how it works
        const o3 = [ 36, 10, 37, 0, 6, 1, 35, 26, 40, 38, 31, 3, 8, 23, 28, 34, 13, 14,
        21, 27, 39, 11, 15, 18, 30, 17, 42, 19, 33, 5, 43, 9, 7, 20, 29, 4, 24, 41, -41,
        25, -25, 12, -12, 32, -32, 22, -22, 16, 2, -2, 41, 25, -40, 25, -42, 25, -39,
        25, 12, -18, 12, 32, -24, 32, -37, 32, 22, 40, -19, 40, -5, 40, 39, 24, 19 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED,
            o3.filter(x => x > -1));
        break;
      case 4:
        // set the specific order in which contacts are treated
        const o4 = [ 42, 16, 36, 22, 4, 8, 41, 12, 1, 10, 25, 31, 2, 28, 5, 29, 40, 37, 6,
        24, 18, 43, 0, 34, 11, 7, 14, 15, 27, 33, 9, 35, 38, 39, 17, 30, 3, 32, 13, 20,
        21, 3, 20, 19, 23, 26, 20, 3, 20, 3, 20, 20, 3 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED,
            o4.filter(x => x > -1));
        break;
      case 5:
        // set the specific order in which contacts are treated
        const o5 = [ 16, 18, 0, 28, 42, 1, 29, 36, 26, 12, 19, 32, 27, 40, 8, 13, 31, 14,
        37, 39, 9, 35, 24, 6, 43, 25, 23, 30, 22, 21, 15, 5, 38, 33, 20, 4, 7, 3, -3,
        11, 2, -2, 17, 10, 41, 34, 3 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED,
            o5.filter(x => x > -1));
        break;
      case 6:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    switch (i) {
      case 0: assertTrue( maxForce < 10.9 ); break;
      case 1: assertTrue( maxForce < 10.1 ); break;
      case 2: assertTrue( maxForce < 9.5 ); break;
      case 3: assertTrue( maxForce < 10.1 ); break;
      case 4: assertTrue( maxForce < 11.5 ); break;
      case 5: assertTrue( maxForce < 11.5 ); break;
      default: assertTrue( maxForce > 9.4 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** Test of finding contact force in Pile simulation (random seed 4 num blocks 12).
Max force is 16.588.
*/
function testMatrix23_CF() {
  startTest(groupName+'testMatrix23_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix23_CF ***');
  const n = 44;
  const a = [
    2.7414885463757365E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.010587753898783E0, -2.203087788332417E1, 7.220160495885183E0, 0, 0, 0, 0, 0, 2.4535739374819943E0, -9.445121406795906E0, 4.581118882279485E0, 0, 0, 0,
    0, 6.19797704862407E0, 0, 0, 0, 0, 0, 0, 5.637034175704319E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.480402744533718E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.1208885045302557E-1, -2.337151327337315E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.2665193568298243E-1, -7.897227155254729E0, 0,
    0, 0, 3.001041717148918E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.7250001861966E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.8386120331892102E0, 1.7728620247658535E0, 0, -1.7778577990214717E0, 0, -1.5227677604968237E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.7653588355126755E0, 0,
    0, 0, 0, 2.989738752284076E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.9987617879538067E-1, 0, 0, 0, 0, 0, 0, 0, 0, 2.117898082704092E0, -1.9200347548314576E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 5.179273606351559E0, 0, 0, -3.2200368206843706E0, 0, 0, 0, 0, 0, 0, -1.1678765218845788E0, 0, 0, 0, 0, 0, 0, 1.169586816171135E0, 0, 0, 4.9515294711259883E-1, -5.029222148820003E-1, 0, 0, 0, 0, 0, 0, 0, 5.435068954446813E-1, 3.221981566635981E0, 0, 0, -5.177655238769296E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1.0237769727473522E0, 3.674054600600527E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.21971901110218E-1, 0, -4.320904286490317E-1, -1.0232830692659078E0, 2.2413411647836765E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.2504316462632087E-1, 0, -3.2133027367253075E-1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 3.6740546006005237E-1, 6.523401174032174E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.0220626724244877E0, 0, -5.916730713790652E0, -3.720364493045302E-1, -2.0971134215319864E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1677726593625142E0, 0, 3.018687173040108E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -3.22003682068437E0, 0, 0, 3.976395070726247E0, 0, 0, 0, 0, 0, 0, 2.0513579692343398E0, 0, 0, 0, 0, 0, 0, -2.0533369612401344E0, 0, 0, -1.4933050467980296E0, -8.838840342567085E-1, 0, 0, 0, 0, 0, 0, 0, -1.5334636606892964E0, -3.9774674520321187E0, 0, 0, 3.218041681401548E0, 0, 0, 0, 0, 0, 0,
    0, 5.637034175704317E-1, 0, 0, 0, 0, 0, 0, 2.5005873355808044E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.8878990752330078E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.377519589015933E-1, -1.6467896415078167E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3928503904238332E-1, 2.7146969354878205E0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 6.101032013147764E0, 0, 0, -6.9748442127552E-1, 0, 0, 0, 0, 0, 0, -4.453711591717501E0, 0, 0, 0, 0, 0, 4.468253505692844E0, 0, 0, 0, 0, 0, 0, 0, 0, -3.607727804825609E0, 0, 0, 0, 0, 0, 0, 3.5973144605037155E0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.360247405956431E0, 8.025348145355253E-1, 0, 0, 0, 0, 0, 0, 0, 0, 2.195360923327938E0, 0, 0, 0, 0, 0, 0, 0, -2.19558355692148E0, 0, 0, 0, 0, 0, 0, -1.7616071501321222E0, 1.6118911169179237E0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.02534814535526E-1, 7.671926056611185E0, 0, 0, 0, 0, 0, 0, 0, 0, -5.893893033117846E0, 0, 0, 0, 0, 0, 0, 0, 5.894593275175072E0, 0, 0, 0, 0, 0, 0, 4.736161240964868E0, -4.331455940556466E0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, -6.974844212755196E-1, 0, 0, 8.368881408176726E0, 0, 0, 0, 0, 0, 0, 5.9501787334440674E0, 0, 0, 0, 0, 0, -5.962506010518288E0, 0, 0, 0, 0, 0, 0, 0, 0, 4.80746148154245E0, 0, 0, 0, 0, 0, 0, -4.77691984553238E0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4711781561541004E0, 0, -8.016522728072952E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.062117848086607E0, 0, 0, 0, 0, 0, 0, 0, -5.535847536111458E-1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -1.167876521884579E0, 0, 0, 2.0513579692343398E0, 0, 0, 0, 0, 0, 0, 2.8756415254390832E0, 0, 0, 0, 0, 0, 0, -2.8767308900157564E0, 0, 0, -2.4470757024295677E0, 3.214613587631265E-1, 0, 0, 0, 0, 0, 0, 0, -2.4778800884595027E0, -2.051527362286353E0, 0, 0, 1.1668457905442828E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.016522728072949E-1, 0, 6.806857817085049E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.792796366247321E0, 0, 0, 0, 0, 0, 0, 0, 1.2881077579976976E0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 9.7250001861966E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.3620429516649377E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2593088405495045E0, -1.216122265655169E0, 0, 1.2134298175503484E0, 0, -1.7107198525215912E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.209130693741777E0, 0,
    0, 0, 0, -1.9987617879538033E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.220773722638255E0, 0, 0, 0, 0, 0, 0, 0, 0, -2.9351296434685685E0, 2.663312603049688E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6673877553418393E1, 0, 0, -7.602092062133036E-1, -5.940433785231493E0, -1.202769589815432E0, 0, 0, 0, 0, 0, 0, 0, 0, -4.925969892133299E0, -1.2426486532436376E0, 0, 0, 0, 0, -1.0291051835565852E1, 1.766087406339786E0, 2.793311532404026E0, 0, 0, 9.26056462124112E0,
    0, 5.480402744533717E0, 0, 0, 0, 0, 0, 0, -1.8878990752330074E0, -4.453711591717501E0, 0, 0, 5.9501787334440674E0, 0, 0, 0, 0, 0, 0, 1.9186332205135333E1, 0, 0, 0, 0, 0, -1.0027983909595937E1, 0, 0, 0, -1.4699771154881716E0, 1.6479520069961628E-1, 0, 0, 0, 2.3308335814168757E0, 0, 0, 0, 0, 0, 0, -8.496667366152382E-1, -1.233268009268305E1, 0,
    0, 0, 0, 0, 0, 3.2197190111021795E-1, -3.022062672424488E0, 0, 0, 0, 2.195360923327938E0, -5.893893033117846E0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2209612905492255E1, 0, 2.6920293420069257E0, -3.199365822119E-1, 1.7891154118127395E-1, 0, 0, 0, -9.608359475796776E0, 0, 0, 0, 0, 0, 0, -2.583411862302168E0, 2.4335932437502596E0, -2.600073386056123E0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1.1695868161711354E0, 0, 0, -2.053336961240134E0, 0, 0, 0, 0, 0, 0, -2.8767308900157564E0, 0, 0, 0, -7.602092062133035E-1, 0, 0, 5.788231946807153E0, 2.8817573308979765E0, -8.763916689148374E-1, 2.4478686161914434E0, -3.2112481166475704E-1, 0, 0, 0, 0, 0, 0, 0, 5.771666745836684E0, 2.0535069239150086E0, 0, 0, -1.1685550916626137E0, 0, 0, -3.854686384491458E-1, 0, 0, -2.8840746987088295E0,
    0, 0, 0, 0, 0, -4.320904286490317E-1, -5.916730713790651E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.940433785231493E0, 0, 2.6920293420069257E0, 2.881757330897977E0, 2.1456370430638163E1, -1.4439219594196349E0, 1.8688359952039124E0, 0, 0, 0, 0, 0, 0, 0, 0, 4.710196968450781E0, 0, -1.0408466710029007E0, 0, -2.6890497285036954E0, 0, 0, -4.149539370141845E0, 0, 0, -1.6076820075678185E1,
    0, 0, 0, 0, 0, -1.0232830692659078E0, -3.720364493045304E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.202769589815432E0, 0, -3.199365822119E-1, -8.763916689148374E-1, -1.4439219594196353E0, 4.603352344398338E0, -2.2190748618715073E-1, 0, 0, 0, 0, 0, 0, 0, 0, -1.4320970317181392E0, 0, 1.2359021579319274E-1, 0, 3.1929797681360106E-1, 0, 0, -1.7472783189597236E0, 0, 0, 1.879129238125827E0,
    0, 0, 0, 0, 4.9515294711259916E-1, 2.2413411647836773E-1, -2.0971134215319864E0, -1.4933050467980298E0, 0, 0, 0, 0, 0, 0, -2.4470757024295677E0, 0, 0, 0, 0, 0, 1.789115411812739E-1, 2.4478686161914434E0, 1.8688359952039124E0, -2.2190748618715084E-1, 3.8867120047136168E0, -2.3343301196893151E-1, 0, 0, 0, 0, 0, 0, 0, 2.1576485410049E0, 1.4932503658221954E0, -1.4010499382740653E0, 0, -6.719453729018806E-1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -5.029222148820003E-1, 0, 0, -8.838840342567084E-1, 0, 4.468253505692843E0, 0, 0, -5.962506010518288E0, 0, 3.2146135876312654E-1, 0, 0, 0, 0, -1.0027983909595939E1, 0, -3.2112481166475715E-1, 0, 0, -2.3343301196893163E-1, 1.1413167352720063E1, 0, 0, 0, 0, 0, 0, 0, -2.3971334249845877E-1, -1.461367869443476E0, 0, 0, 5.03363236602314E-1, 0, 0, 0, 2.3181654582432167E0, 0, 0,
    0, 0, -1.8386120331892104E0, 2.117898082704092E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2593088405495043E0, -2.935129643468569E0, 0, 0, 0, 0, 0, 0, 0, 0, 9.612895160060186E0, -2.302179574286397E0, 0, 9.139463773824033E-1, 0, -9.178011624467466E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.49303279648432E0, 0,
    0, 0, 1.7728620247658533E0, -1.920034754831458E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.216122265655169E0, 2.663312603049688E0, 0, 0, 0, 0, 0, 0, 0, 0, -2.302179574286396E0, 8.82417633823486E0, 0, -4.412919499276568E0, 0, -5.82241174386449E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.03921044699783E-1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.195583556921481E0, 5.894593275175071E0, 0, 2.062117848086607E0, 0, -4.792796366247322E0, 0, 0, 0, 0, -9.608359475796778E0, 0, 0, 0, 0, 0, 0, 0, 1.54143333572095E1, 0, 0, 0, 0, 0, 0, 2.9099699371253456E0, -2.1075914326959166E0, 0, 0, 0, 0, 0, 0, 0,
    0, 4.120888504530254E-1, -1.7778577990214721E0, 0, 0, 0, 0, 0, -1.377519589015932E-1, 0, 0, 0, 0, 0, 0, 0, 1.2134298175503488E0, 0, 0, -1.4699771154881713E0, 0, 0, 0, 0, 0, 0, 9.139463773824031E-1, -4.412919499276568E0, 0, 6.459955937078908E0, -8.867960649867975E-1, 5.854138503780637E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.0461843386190606E0, 4.2848581010369124E-1, 0,
    -3.010587753898783E0, -2.337151327337315E0, 0, 0, 0, 0, 0, 0, -1.6467896415078167E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6479520069961762E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.867960649867974E-1, 6.139158491040831E0, 2.8530405879041796E0, -3.80153705864319E0, 0, 0, 0, 0, 0, 0, 0, -1.48185937153493E0, 8.906120095861346E-1, 1.3369438508784803E-1, 0,
    -2.2030877883324166E1, 0, -1.5227677604968237E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.7107198525215912E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.178011624467466E-1, -5.822411743864491E-1, 0, 5.854138503780633E-1, 2.8530405879041796E0, 2.668732068747449E1, -7.728011893797863E0, 0, 0, 0, 0, 0, 0, 0, -5.041527378248729E0, 0, 9.110139754932856E-1, 0,
    7.220160495885182E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.925969892133299E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.8015370586431905E0, -7.728011893797863E0, 9.892362514143153E0, 0, 0, 0, 0, 0, 3.8436324187733795E0, -3.250620862553747E-1, 2.2696854935140784E0, 0, 0, -1.433775934268895E0,
    0, 0, 0, 0, 5.435068954446817E-1, 0, 0, -1.533463660689297E0, 0, 0, 0, 0, 0, 0, -2.4778800884595023E0, 0, 0, 0, -1.2426486532436374E0, 0, 0, 5.771666745836685E0, 4.710196968450782E0, -1.4320970317181392E0, 2.1576485410049004E0, -2.3971334249845866E-1, 0, 0, 0, 0, 0, 0, 0, 6.09889489849618E0, 1.5334250856769394E0, 0, 0, -5.427364294965527E-1, 0, 0, -6.301751347343052E-1, 0, 0, -4.712072805462519E0,
    0, 0, 0, 0, 3.221981566635981E0, 0, 0, -3.9774674520321187E0, 0, -3.6077278048256103E0, 0, 0, 4.80746148154245E0, 0, -2.051527362286352E0, 0, 0, 0, 0, 2.3308335814168757E0, 0, 2.053506923915009E0, 0, 0, 1.4932503658221956E0, -1.461367869443476E0, 0, 0, 0, 0, 0, 0, 0, 1.5334250856769391E0, 1.1629888869455636E1, 0, 0, -3.2199858883540777E0, 0, 0, 0, -7.629616590648307E0, 0, 0,
    0, 0, 0, 0, 0, -1.2504316462632087E-1, 1.1677726593625142E0, 0, 0, 0, -1.761607150132122E0, 4.7361612409648695E0, 0, 0, 0, 0, 0, 0, 0, 0, -2.583411862302167E0, 0, -1.0408466710029E0, 1.2359021579319274E-1, -1.401049938274065E0, 0, 0, 0, 2.909969937125346E0, 0, 0, 0, 0, 0, 0, 8.35086300950586E0, -6.762840464311448E0, -3.2668434515202605E-1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6118911169179242E0, -4.3314559405564665E0, 0, -5.535847536111458E-1, 0, 1.2881077579976972E0, 0, 0, 0, 0, 2.4335932437502605E0, 0, 0, 0, 0, 0, 0, 0, -2.1075914326959158E0, 0, 0, 0, 0, 0, 0, -6.762840464311448E0, 8.211808709012352E0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -5.177655238769296E0, -3.2133027367253053E-1, 3.018687173040108E0, 3.2180416814015476E0, 0, 0, 0, 0, 0, 0, 1.166845790544283E0, 0, 0, 0, 0, 0, -2.600073386056123E0, -1.1685550916626137E0, -2.6890497285036945E0, 3.1929797681360095E-1, -6.719453729018805E-1, 5.03363236602314E-1, 0, 0, 0, 0, 0, 0, 0, -5.427364294965527E-1, -3.2199858883540773E0, -3.2668434515202605E-1, 0, 7.774141745589526E0, 0, 0, 0, 0, 0, 0,
    2.4535739374819943E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0291051835565852E1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.8436324187733795E0, 0, 0, 0, 0, 0, 1.6386207792644534E1, -4.007784076892848E0, 0, 0, 0, -3.585644285519887E0,
    -9.445121406795906E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.766087406339786E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.2506208625537436E-1, 0, 0, 0, 0, 0, -4.007784076892847E0, 2.7321107765867925E1, 0, 0, 0, -4.609254673425197E0,
    4.581118882279486E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.793311532404026E0, 0, 0, -3.854686384491455E-1, -4.149539370141845E0, -1.7472783189597236E0, 0, 0, 0, 0, 0, 0, -1.4818593715349302E0, -5.041527378248729E0, 2.2696854935140784E0, -6.301751347343052E-1, 0, 0, 0, 0, 0, 0, 7.106184841119606E0, 0, 0, 4.149092730943441E0,
    0, -4.2665193568298276E-1, 0, 0, 0, 0, 0, 0, 1.3928503904238326E-1, 3.597314460503715E0, 0, 0, -4.77691984553238E0, 0, 0, 0, 0, 0, 0, -8.496667366152382E-1, 0, 0, 0, 0, 0, 2.3181654582432163E0, 0, 0, 0, -2.04618433861906E0, 8.906120095861347E-1, 0, 0, 0, -7.629616590648306E0, 0, 0, 0, 0, 0, 0, 9.655395784754894E0, -1.2118467011799527E0, 0,
    0, -7.897227155254729E0, 1.765358835512675E0, 0, 0, 0, 0, 0, 2.7146969354878205E0, 0, 0, 0, 0, 0, 0, 0, -1.2091306937417767E0, 0, 0, -1.233268009268305E1, 0, 0, 0, 0, 0, 0, -4.493032796484321E0, 8.039210446997831E-1, 0, 4.28485810103691E-1, 1.3369438508784748E-1, 9.110139754932856E-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.2118467011799532E0, 2.1264644798270666E1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.260564621241118E0, 0, 0, -2.8840746987088304E0, -1.607682007567818E1, 1.8791292381258264E0, 0, 0, 0, 0, 0, 0, 0, 0, -1.433775934268895E0, -4.712072805462519E0, 0, 0, 0, 0, -3.5856442855198867E0, -4.609254673425198E0, 4.149092730943442E0, 0, 0, 2.0250873990976437E1
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [
    -1.8208771552344952E1, -7.335832168696026E0, -7.071103109325087E0,
    -7.07109623632823E0, -7.071074651967621E0, -7.0710678118654755E0,
    -7.071067811865464E0, -7.071061892144378E0, -7.070980560945015E0,
    -7.0706672770573E0, -7.069673612417345E0, -7.067113120866276E0, -7.05287170126272E0,
    -7.045869440391552E0, -7.0409522421754005E0, -7.036173924404868E0,
    -7.0083619037924425E0, -6.982858739316756E0, -2.6386209284199325E-3,
    -3.6434075302249624E-4, -6.2066515319259E-5, -4.125621125616874E-5,
    2.2695871848554816E-8, 2.2695878065803754E-8, 7.995491355217155E-6,
    1.0291040609899937E-5, 3.331142173923496E-5, 3.3313696322423425E-5,
    4.043384973151376E-5, 1.0691462020595566E-4, 4.938156677813943E-4,
    6.360229459612121E-4, 1.1077511247332694E-3, 2.930333974433985E-3,
    3.47200758240529E-3, 3.900487634988181E-3, 3.978161277019332E-3,
    2.6930857293892885E-2, 3.0637128352484666E-2, 3.063712835248822E-2,
    3.912928815505978E-2, 2.563724048388609E-1, 2.8121608178816615E-1,
    7.534374908426562E-1
    ];
  const joint = new Array(n);
  for (let i=0; i<n; i++) {
    joint[i] = false;
  }
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    switch (i) {
      case 0: assertTrue( maxForce < 16.6 ); break;
      default: assertTrue( maxForce > 16.5 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** Test of finding contact force in Pile simulation also containing 2 blocks
  connected by joints. In this case only 2 of the 4 joints go into C initially, 2 into
  NC, but then later one of the joints is pushed from NC to C.
  Max force is 15.46.
*/
function testMatrix24_CF() {
  startTest(groupName+'testMatrix24_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix24_CF ***');
  const n = 23;
  const a = [
    2.7892400774463088E1, 0, 0, 0, 0, 0, 0, -6.230431677828652E0, 0, 0, 0, 0, -2.7882893674773086E1, 0, -4.542833933237243E0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 2.2670970180659054E0, -7.567128279462625E-1, 0, 1.2323600883731283E0, -1.1783015390344096E0, 0, 0, 0, 0, 0, -1.6009197023013324E0, 0, 0, -2.26581916585393E0, 0, 2.58609391617948E-1, -8.115036477049442E-2, 0, 0, 0, 0, 0,
    0, -7.567128279462622E-1, 3.092753373281611E0, 0, -1.5688580795485185E0, 1.5000387525523968E0, 0, 0, 0, 0, 0, -9.13652228408558E-2, 0, 0, 7.550861555537789E-1, 0, -3.298741216209521E-1, -2.026110129569325E0, 0, 0, 0, 0, 0,
    0, 0, 0, 6.555356725241194E0, 0, 0, 0, 0, -2.951443391869017E0, 0, 0, 0, 0, 1.2061779835229234E0, 0, 0, 0, 0, -6.493258506204614E0, 0, 0, 0, 0,
    0, 1.2323600883731283E0, -1.5688580795485185E0, 0, 2.0784529491191224E0, -1.5475267269311166E-1, 0, 0, 0, 0, 0, -6.149357162048998E-1, 0, 0, -1.2308899434858298E0, 0, -6.969728268682727E-1, 7.929588592281678E-1, 0, 0, 0, 0, 0,
    0, -1.1783015390344098E0, 1.5000387525523964E0, 0, -1.5475267269311155E-1, 1.9804914381701506E0, 0, 0, 0, 0, 0, 5.885212613943088E-1, 0, 0, 1.1774561196612559E0, 0, -1.1661275343304178E0, -7.576147914382453E-1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1.0292418982678207E1, 0, 0, 1.84868594564501E-1, 0, 0, 0, -3.2182879569555296E0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -6.230431677828652E0, 0, 0, 0, 0, 0, 0, 9.26508912294607E0, 0, 0, 0, 0, 6.226116265964512E0, 0, 2.060978962538684E0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, -2.951443391869016E0, 0, 0, 0, 0, 1.0464971041476296E1, 0, 0, 0, 0, -6.878240236988056E0, 0, 0, 0, 0, 2.863825881038846E0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1.84868594564501E-1, 0, 0, 9.362616689367966E0, -8.487167062531635E-1, 0, 0, -6.784404717681117E0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, -8.487167062531639E-1, 9.265454838036824E0, 0, 0, 0, 0, -2.221775584864865E0, 0, 0, -1.6323538318630928E0, 0, 0, 0, 0,
    0, -1.6009197023013326E0, -9.136522284085591E-2, 0, -6.149357162049001E-1, 5.885212613943088E-1, 0, 0, 0, 0, 0, 6.864860309054555E0, -2.0118562583721564E0, 0, 1.6002818351192647E0, -1.1103561191502318E0, -1.2924665289052895E-1, 1.5313172764156802E0, 0, 0, 0, 0, 0,
    -2.788289367477309E1, 0, 0, 0, 0, 0, 0, 6.226116265964512E0, 0, 0, 0, -2.0118562583721573E0, 3.0674999219611777E1, 0, 4.5376315566251355E0, -3.607488023232541E-1, 0, 3.8115526623322643E-1, 0, 0, 0, 0, 0,
    0, 0, 0, 1.2061779835229236E0, 0, 0, -3.21828795695553E0, 0, -6.878240236988056E0, -6.784404717681117E0, 0, 0, 0, 1.5202703373298345E1, 0, 0, 0, 0, -1.1498008263254342E0, 0, 0, 0, 0,
    -4.542833933237246E0, -2.26581916585393E0, 7.55086155553779E-1, 0, -1.2308899434858298E0, 1.1774561196612559E0, 0, 2.060978962538684E0, 0, 0, 0, 1.6002818351192651E0, 4.537631556625135E0, 0, 7.569387058969998E0, 0, -2.5864710866922813E-1, 8.197231406457867E-2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.2217755848648646E0, -1.1103561191502314E0, -3.607488023232545E-1, 0, 0, 4.0550877792199715E0, 0, -1.8692574798258648E0, 4.6091813512461055E-2, 0, 0, 0, 0,
    0, 2.5860939161794816E-1, -3.298741216209522E-1, 0, -6.969728268682727E-1, -1.1661275343304178E0, 0, 0, 0, 0, 0, -1.2924665289052908E-1, 0, 0, -2.586471086692282E-1, 0, 3.784062411903135E0, 1.665256491417546E-1, 0, 1.0047654570596882E0, 2.311636777044618E0, -3.508566705319127E-3, 1.3033627532796106E0,
    0, -8.115036477049442E-2, -2.0261101295693247E0, 0, 7.929588592281677E-1, -7.576147914382452E-1, 0, 0, 0, 0, 0, 1.53131727641568E0, 3.8115526623322626E-1, 0, 8.197231406457883E-2, -1.869257479825865E0, 1.6652564914175466E-1, 3.373432833894576E0, 0, 0, 0, 0, 0,
    0, 0, 0, -6.493258506204614E0, 0, 0, 0, 0, 2.863825881038846E0, 0, -1.6323538318630924E0, 0, 0, -1.1498008263254338E0, 0, 4.609181351246083E-2, 0, 0, 9.274034848042707E0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0047654570596882E0, 0, 0, 2.960012638443954E0, 2.003478583973317E0, 9.599905476993722E-1, 3.4564932287352024E-3,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.3116367770446185E0, 0, 0, 2.003478583973317E0, 2.957439579007631E0, -2.6016352640624296E-3, 9.513593597702512E-1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.5085667053189606E-3, 0, 0, 9.599905476993722E-1, -2.6016352640624296E-3, 2.9600070693819194E0, 1.9974148864184846E0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3033627532796106E0, 0, 0, 3.456493228735369E-3, 9.513593597702511E-1, 1.9974148864184846E0, 2.9453177529600003E0
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [
    -7.074506590979136E0, -7.0710678118654755E0, -7.0710678118654755E0,
    -6.914236058013229E0, -6.765034480758734E0, -6.765034480758734E0,
    -6.083465377072029E0, -5.85964898993373E0, -4.6651058518460164E0,
    -8.454871964947985E-1, -4.0594976013170125E-1, -3.103838447797713E-4,
    5.005140459951818E-3, 4.739999320475974E-2, 2.3813791768033798E-1,
    3.222282506243257E-1, 6.138827774375333E-1, 8.937634334951641E-1,
    3.2408071050424527E0, -9.225207869949514E-4, -9.225207854006712E-4,
    9.284166964205198E-4, 9.28416698019241E-4
    ];
  const joint = [ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=20; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    switch (i) {
      case 0: assertTrue( maxForce < 15.5 ); break;
      default: assertTrue( maxForce > 15.4 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/** Test of finding contact force in DoNothingGrinder. This happens at 52.225 seconds,
with the constantly rotating force on the handle. Previously there was a failure to
find a solution, but this has been fixed by improving the 'detect singular matrix'
code. Some of the contacts are redundant (treating them would make the Acc matrix
singular) so they are deferred and are not treated because while their acceleration is
more than the tolerance of 1E-10, it is less then the SMALL_ACCEL 'reject tolerance'
of 1E-8; therefore instead of trying to get smaller accel at the cost of large forces,
we accept the slightly larger accel values at these 2 contacts that get rejected.

Max Force is either 2.639 or 2.6585 depending on order of contacts.

There is a particular sequence that results in max accel of -2.57E-7, and max force
of 960, when we allow poorly conditioned matrices with the test for a singular matrix
allowing diagonal entries as small as 0.0016.
*/
function testMatrix25_CF() {
  startTest(groupName+'testMatrix25_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix25_CF ***');
  const n = 14;
  const a = [
    3.5745763362333545E0, 1.4813679726385824E0, 1.5803850636054817E0, 0, 0, 0, 0, -3.5803850636005627E0, -1.5803850636005625E0, -1.4813679726435707E0, -2.3831435123204035E-12, 0, 1E0, 0,
    1.4813679726385822E0, 1.0900012642162251E0, -5.175459708792775E-1, 0, 0, 0, 0, -1.482454029119803E0, 5.175459708801972E-1, -1.090001264217158E0, -2.3831435123204035E-12, 0, 1E0, 0,
    1.5803850636054815E0, -5.175459708792773E-1, 3.5862068965566545E0, 0, 0, 0, 0, -1.5862068965517242E0, -3.586206896551724E0, 5.175459708742778E-1, 0, 0, -1E0, 0,
    0, 0, 0, 3.586206896550574E0, 1.586206896550575E0, -1.5862068965517233E0, -3.586206896551724E0, 0, 0, 0, 0, 0, 0, 1E0,
    0, 0, 0, 1.586206896550575E0, 3.586206896550576E0, -3.586206896551724E0, -1.586206896551725E0, 0, 0, 0, 0, 0, 0, -1E0,
    0, 0, 0, -1.5862068965517233E0, -3.586206896551724E0, 3.5862068965528726E0, 1.586206896552874E0, 0, 0, 0, 0, 0, 0, 1E0,
    0, 0, 0, -3.586206896551724E0, -1.586206896551725E0, 1.586206896552874E0, 3.586206896552875E0, 0, 0, 0, 0, 0, 0, -1E0,
    -3.5803850636005623E0, -1.4824540291198027E0, -1.5862068965517242E0, 0, 0, 0, 0, 3.586206896546794E0, 1.586206896546794E0, 1.4824540291248025E0, 0, 0, -1E0, 0,
    -1.5803850636005623E0, 5.175459708801972E-1, -3.586206896551724E0, 0, 0, 0, 0, 1.586206896546794E0, 3.586206896546794E0, -5.175459708751975E-1, 0, 0, 1E0, 0,
    -1.4813679726435707E0, -1.0900012642171577E0, 5.175459708742778E-1, 0, 0, 0, 0, 1.4824540291248025E0, -5.175459708751975E-1, 1.0900012642180903E0, 2.3831435123204035E-12, 0, -1E0, 0,
    -2.3831435123204035E-12, -2.3831435123204035E-12, 0, 0, 0, 0, 0, 0, 0, 2.3831435123204035E-12, 3.093735780862267E0, -1.5531667197214424E-1, 2.2274747140121797E-2, 1.3464020272330979E0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.5531667197214424E-1, 3.257353898058936E0, 1.963091579725481E0, 1.0829873182265197E0,
    1E0, 1E0, -1E0, 0, 0, 0, 0, -1E0, 1E0, -1E0, 2.2274747140121797E-2, 1.963091579725481E0, 3.005293222668998E0, -1.553166724675945E-1,
    0, 0, 0, 1E0, -1E0, 1E0, -1E0, 0, 0, 0, 1.3464020272330979E0, 1.0829873182265197E0, -1.553166724675945E-1, 7.557387862727747E0
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [
    -2.8354858962890304E-10, -2.835485896288947E-10, -1.44032824160894E-23,
    -1.8004103020096633E-24, -7.716044151468356E-25, 7.716044151474067E-25,
    1.8004103020102352E-24, 6.172835321167163E-24, 1.4403282416069786E-23,
    2.835485896288947E-10, -4.926858550202041E0, -9.103527204532552E-1,
    -7.663596612753361E-1, 7.222901656807832E0
    ];
  const joint = [ false, false, false, false, false, false, false, false, false,
    false, true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        // set the specific order in which contacts are treated
        // This gives min accel of -2.57E-7, max force of 960, when poorly
        // conditioned matrices are allowed.
        const o = [ 11, 12, 10, 13, 6, 5, 0, 9, 4, 7, 1, 3, 2, -2, 8, 9, -9, 2, -2, 9, -9, 2, -2 ];
        cf.setNextContactPolicy(NextContactPolicy.PRE_ORDERED,
            o.filter(x => x > -1));
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-8;
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    assertTrue( maxAccel < SMALL_ACCEL );
    const maxForce = UtilEngine.maxSize(f);
    if (i==0) {
      assertTrue( maxForce < 2.65 );
    } else {
      assertTrue( maxForce > 2.63 );
    }
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/**  Matrix from two-connected-blocks (in Pile sim) which after a lot of spinning
the joints have separated by 2.2E-3 and ComputeForces is complaining about
a singular matrix and not being able to get all contact accelerations to zero.
*/
function testMatrix26_CF() {
  startTest(groupName+'testMatrix26_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix26_CF ***');
  const n = 4;
  const a = [
    4.917491749174901E0, -1.6909937783360363E-7, 3.333333502432712E0, 1.5841584158415662E0,
    -1.6909937738951442E-7, 4.933333333333353E0, 1.5999999999999823E0, 3.333333164233956E0,
    3.3333335024327124E0, 1.599999999999982E0, 4.933333333333352E0, 1.6909937772258132E-7,
    1.5841584158415665E0, 3.3333331642339554E0, 1.6909937761155902E-7, 4.917491749174898E0
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [
    -1.3501442501864875E0, 1.3015946886900078E0, -1.3501446747723067E0, 1.3015945549350354E0
    ];
  const joint = [ true, true, true, true ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 2E-6;
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    const maxForce = UtilEngine.maxSize(f);
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    assertTrue( maxAccel < SMALL_ACCEL );
    assertTrue( maxForce < 0.41 );
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
  }
};

/**  Matrix from DoNothingGrinder accelerating with constant force to very
fast rotation.  This matrix triggers the infinite loop detection in ComputeForces,
see {@link ComputeForces.checkLoop}.
*/
function testMatrix27_CF() {
  startTest(groupName+'testMatrix27_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix27_CF ***');
  const n = 16;
  const a = [
    3.0990277097284387E0, 3.500191511238789E-4, 1.3095026290678669E0, -2.4406027796634766E-3, 0, 1.4037887002254656E-7, 0, 0, 0, -1.4037887002254656E-7, 0, 1.4037887002254656E-7, 0, 0, 0, -1.4037887002254656E-7,
    3.500191511238789E-4, 3.0000012371628757E0, -2.4406027796634775E-3, 1.9999913735487218E0, -1E0, -9.999999999999901E-1, 0, 0, 1E0, 9.999999999999901E-1, -1E0, -9.999999999999901E-1, 0, 0, 1E0, 9.999999999999901E-1,
    1.3095026290678669E0, -2.4406027796634775E-3, 7.814678846675021E0, 1.7017760053914734E-2, 0, 0, -1E0, -1E0, 0, 0, 0, 0, 1E0, 1E0, 0, 0,
    -2.4406027796634766E-3, 1.9999913735487218E0, 1.7017760053914734E-2, 3.0000601502543525E0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, -1E0, 0, 0, 3.58620660611264E0, 2.0714674517937617E0, 0, 0, -3.5862068965516647E0, -2.0714671572885903E0, -1.5862068965516647E0, -2.6463464886880783E-2, 0, 0, 1.5862066061126399E0, 2.6463759392052366E-2,
    1.4037887002254656E-7, -9.999999999999901E-1, 0, 0, 2.0714674517937617E0, 1.4439098166171171E0, 0, 0, -2.071467572122881E0, -1.4439096946033902E0, -7.146757212290011E-2, 5.747353709165186E-1, 0, 0, 7.146745179378135E-2, -5.74735248902792E-1,
    0, 0, -1E0, 0, 0, 0, 3.586206896551724E0, -1.5862068965517242E0, 0, 0, 0, 0, -3.586206896551724E0, 1.5862068965517242E0, 0, 0,
    0, 0, -1E0, 0, 0, 0, -1.5862068965517242E0, 3.586206896551724E0, 0, 0, 0, 0, 1.5862068965517242E0, -3.586206896551724E0, 0, 0,
    0, 1E0, 0, 0, -3.5862068965516647E0, -2.071467572122881E0, 0, 0, 3.5862071869907224E0, 2.071467277617676E0, 1.5862071869907224E0, 2.646358016191208E-2, 0, 0, -1.5862068965516647E0, -2.646387466711675E-2,
    -1.4037887002254656E-7, 9.999999999999901E-1, 0, 0, -2.0714671572885903E0, -1.4439096946033905E0, 0, 0, 2.0714672776176757E0, 1.4439095725896973E0, 7.146727761769563E-2, -5.747354878054005E-1, 0, 0, -7.146715728861014E-2, 5.747353657917075E-1,
    0, -1E0, 0, 0, -1.5862068965516647E0, -7.146757212290045E-2, 0, 0, 1.5862071869907224E0, 7.146727761769578E-2, 3.5862071869907224E0, 2.0264635801618924E0, 0, 0, -3.5862068965516647E0, -2.026463874667097E0,
    1.4037887002254656E-7, -9.999999999999901E-1, 0, 0, -2.6463464886880735E-2, 5.747353709165186E-1, 0, 0, 2.6463580161911932E-2, -5.747354878054006E-1, 2.0264635801618924E0, 1.407402580388301E0, 0, 0, -2.0264634648868607E0, -1.4074026972771831E0,
    0, 0, 1E0, 0, 0, 0, -3.586206896551724E0, 1.5862068965517242E0, 0, 0, 0, 0, 3.586206896551724E0, -1.5862068965517242E0, 0, 0,
    0, 0, 1E0, 0, 0, 0, 1.5862068965517242E0, -3.586206896551724E0, 0, 0, 0, 0, -1.5862068965517242E0, 3.586206896551724E0, 0, 0,
    0, 1E0, 0, 0, 1.5862066061126399E0, 7.146745179378156E-2, 0, 0, -1.5862068965516647E0, -7.146715728860997E-2, -3.5862068965516647E0, -2.026463464886861E0, 0, 0, 3.58620660611264E0, 2.0264637593920325E0,
    -1.4037887002254656E-7, 9.999999999999901E-1, 0, 0, 2.646375939205216E-2, -5.747352489027919E-1, 0, 0, -2.646387466711664E-2, 5.747353657917075E-1, -2.026463874667097E0, -1.407402697277183E0, 0, 0, 2.0264637593920325E0, 1.4074028141660986E0
    ];
  const A = UtilEngine.newMatrixFromArray(n, a);
  const b = [
    1.3416364873286568E-5, 1.5043632174490534E-3, -9.354921660786886E-5, -1.0489577608414624E-2, 1.6100155690118795E-13, -5.256531264513286E-6, 1.6132928326584313E-17, 1.6416266494327183E-16, -2.1848152271592347E-14, 5.256531123411734E-6, 2.4781759127279856E-6, -4.251383179613047E-6, -1.6132928326584313E-17, -1.6416266494327183E-16, -2.478175773574581E-6, 4.2513830385114946E-6
    ];
  const joint = [ true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false ];
  const cf = new ComputeForces('T', new RandomLCG(99999));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 1E-5;
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    const maxForce = UtilEngine.maxSize(f);
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    assertTrue( maxAccel < SMALL_ACCEL );
  }
};

/**  Test of a situation where a diagonal line is going almost thru corner of a square block.
*/
function testLinesIntersect() {
  startTest(groupName+'testLinesIntersect');
  // p1 to p2 is horizontal edge
  const p1 = new Vector(3.5355339059327378, 0.5);
  const p2 = new Vector(-3.5355339059327378, 0.5);
  // p3 to p4 is diagonal
  const p3 = new Vector(-3.497695148119348, 0.47209383993684373);
  const p4 = new Vector(-3.665778648699753, 0.5768083643426545);
  assertTrue(UtilEngine.linesIntersect(p1, p2, p3, p4) === null );
  // p5 to p2 is vertical edge
  const p5 = new Vector(-3.5355339059327378, -0.5);
  assertTrue(UtilEngine.linesIntersect(p5, p2, p3, p4) != null );
};

/** From DoNothingGrinder, this results in large forces of 39 and 45 which is a bad
solution.  The test shows there is a way to solve with small forces.
Created Sept 24, 2015.

To Do: Find ways to always avoid these large forces.
If we change modify ComputeForces.fdirection() to reject contact when it would make the
Acc matrix singular;  then it seems all instances of NEXT_CONTACT_RANDOM get small
forces.  However the test for singular matrix is not really correct, so we can't
rely on that.
*/
function testMatrix28_CF() {
  startTest(groupName+'testMatrix28_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix28_CF ***');
  const a = [
    3.09902894689131436e+0, 0, 1.30949400261658866e+0, 0, 0, 0, 0, 0, 1.28458531376337726e-1, 1.28458602716797654e-1, -1.28458531376337726e-1, -1.28458602716797654e-1, 1.28458531376337726e-1, 1.28458602716797654e-1, -1.28458531376337726e-1, -1.28458602716797654e-1,
    0, 3.00000000000000044e+0, -2.77555756156289135e-17, 2.00000000000000044e+0, 0, 0, 0, 0, -9.91714881262066417e-1, -9.91714872021211558e-1, 9.91714881262066417e-1, 9.91714872021211558e-1, -9.91714881262066417e-1, -9.91714872021211558e-1, 9.91714881262066417e-1, 9.91714872021211558e-1,
    1.30949400261658866e+0, -5.55111512312578270e-17, 7.81473899692937479e+0, 0, -9.91714872021211558e-1, -9.91714872021211558e-1, 9.91714872021211558e-1, 9.91714872021211558e-1, 0, 0, 0, 0, 0, 0, 0, 0,
    2.77555756156289135e-17, 2.00000000000000044e+0, 0, 3.00000000000000044e+0, -1.28458602716797654e-1, -1.28458602716797654e-1, 1.28458602716797654e-1, 1.28458602716797654e-1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, -9.91714872021211558e-1, -1.28458602716797654e-1, 3.58620689028269579e+0, -1.58620689655172376e+0, -3.58620689655172420e+0, 1.58620689028269624e+0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, -9.91714872021211558e-1, -1.28458602716797654e-1, -1.58620689655172376e+0, 3.58620690282075216e+0, 1.58620690282075261e+0, -3.58620689655172420e+0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 9.91714872021211558e-1, 1.28458602716797654e-1, -3.58620689655172420e+0, 1.58620690282075261e+0, 3.58620690282075261e+0, -1.58620689655172464e+0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 9.91714872021211558e-1, 1.28458602716797654e-1, 1.58620689028269624e+0, -3.58620689655172420e+0, -1.58620689655172464e+0, 3.58620689028269668e+0, 0, 0, 0, 0, 0, 0, 0, 0,
    1.28458531376337726e-1, -9.91714881262066417e-1, 0, 0, 0, 0, 0, 0, 2.39567840868317239e+0, 2.89987192558583207e+0, -2.39567851954992728e+0, -2.89987181624978341e+0, 8.54502346994645112e-1, -8.99871816249787515e-1, -8.54502457861398890e-1, 8.99871925585836729e-1,
    1.28458602716797654e-1, -9.91714872021211558e-1, 0, 0, 0, 0, 0, 0, 2.89987192558583251e+0, 3.58620704538577506e+0, -2.89987207650357393e+0, -3.58620689655171043e+0, 8.01940830735988319e-1, -1.58620689655170910e+0, -8.01940981653729734e-1, 1.58620704538577373e+0,
    -1.28458531376337726e-1, 9.91714881262066417e-1, 0, 0, 0, 0, 0, 0, -2.39567851954992683e+0, -2.89987207650357348e+0, 2.39567863041668971e+0, 2.89987196716751550e+0, -8.54502335436930660e-1, 8.99871967167520603e-1, 8.54502446303693319e-1, -8.99872076503578477e-1,
    -1.28458602716797654e-1, 9.91714872021211558e-1, 0, 0, 0, 0, 0, 0, -2.89987181624978341e+0, -3.58620689655171043e+0, 2.89987196716751594e+0, 3.58620674771765424e+0, -8.01940842134128862e-1, 1.58620674771765291e+0, 8.01940993051861617e-1, -1.58620689655170910e+0,
    1.28458531376337726e-1, -9.91714881262066417e-1, 0, 0, 0, 0, 0, 0, 8.54502346994645112e-1, 8.01940830735988430e-1, -8.54502335436930660e-1, -8.01940842134128862e-1, 1.01516794047852343e+0, 1.19805915786586592e+0, -1.01516792892080909e+0, -1.19805916926400635e+0,
    1.28458602716797654e-1, -9.91714872021211558e-1, 0, 0, 0, 0, 0, 0, -8.99871816249787515e-1, -1.58620689655170910e+0, 8.99871967167520714e-1, 1.58620674771765291e+0, 1.19805915786586592e+0, 3.58620674771765202e+0, -1.19805900694813316e+0, -3.58620689655170866e+0,
    -1.28458531376337726e-1, 9.91714881262066417e-1, 0, 0, 0, 0, 0, 0, -8.54502457861398890e-1, -8.01940981653729845e-1, 8.54502446303693319e-1, 8.01940993051861617e-1, -1.01516792892080887e+0, -1.19805900694813316e+0, 1.01516791736310341e+0, 1.19805901834626494e+0,
    -1.28458602716797654e-1, 9.91714872021211558e-1, 0, 0, 0, 0, 0, 0, 8.99871925585836840e-1, 1.58620704538577373e+0, -8.99872076503578255e-1, -1.58620689655170910e+0, -1.19805916926400635e+0, -3.58620689655170866e+0, 1.19805901834626516e+0, 3.58620704538577328e+0
    ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -5.33319652234680230e+0, 3.53386329770627672e-1, 6.53679795221036741e+0, 1.10064447440803037e+0,
    3.44249215717682934e-10, 2.96965094790328458e-10, -3.44249215186528291e-10, -2.96965094259173814e-10,
    -1.91013382106722499e-7, -9.52391463184272534e-9, 1.91013378261178810e-7, 9.52391853439279372e-9,
    -1.89429245334199004e-7, -5.61825197769212870e-9, 1.89429241488655288e-7, 5.61825588024219708e-9
    ];
  const n = A.length;
  const joint = [ true, true, true, true, false, false, false, false, false, false, false,
    false, false, false, false, false ];
  const cf = new ComputeForces('T', new RandomLCG(81976022));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        // use default next contact policy
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
      case 3:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 5E-6;
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    const maxForce = UtilEngine.maxSize(f);
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    assertTrue( maxAccel < SMALL_ACCEL );
    if (maxForce < 3) {
      if (VERBOSE) {
        console.log('found a solution with maxForce < 3');
      }
      return;
    }
  }
  reportTestResults(false, 'fail', 'did not find a solution with max force < 3');
};

/** This came from running do_nothing_grinder_test1, with DEFER_SINGULAR=false in
ComputeForces.  At time 12.1000 there is an ImpulseSim collision with a large
force of 65022, and results in an error:
  [Error] negative impulse is impossible -7.275957614183426e-12
  CornerEdgeCollision{distance: 0.00700, normalVelocity_: -1.73563e-10, body:
  "FIXED_BLOCK0", normalBody: "SHUTTLE2", impact1: Vector{x: 0.50700, y: 0.50000},
  contact: true, joint: false, elasticity_: 0.8, targetGap_: 0.00500, accuracy_:
  0.0030000, mustHandle_: false, impact2: null, normal: Vector{x: -0.00000, y:
  1.00000}, ballObject: false, ballNormal: false, estimate_: NaN, detectedTime_:
  12.1000000, detectedDistance_: 0.00700, detectedVelocity_: -1.73563e-10, impulse:
  NaN, force: NaN, updateTime_: NaN, creator: StraightEdge.findVertexContactVert,
  vertex-id: 16, primaryEdge-idx: 3, primaryEdge2-idx: 0, normalEdge-idx: 1}
*/
function testMatrix29_CF() {
  startTest(groupName+'testMatrix29_CF');
  const VERBOSE = false;
  if (VERBOSE)
    console.log('\n\n*** testMatrix29_CF ***');
  const a = [
    3.09902894689131436e+0, 0.00000000000000000e+0, 1.30949400261658866e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 1.82631811694281762e-2, 1.82631811848982702e-2, -1.82631811694281762e-2, -1.82631811848982702e-2, 1.82631811694281762e-2, 1.82631811848982702e-2, -1.82631811694281762e-2, -1.82631811848982702e-2,
    6.93889390390722838e-18, 3.00000000000000000e+0, 0.00000000000000000e+0, 2.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 9.99833214198034392e-1, 9.99833214197751841e-1, -9.99833214198034392e-1, -9.99833214197751841e-1, 9.99833214198034392e-1, 9.99833214197751841e-1, -9.99833214198034392e-1, -9.99833214197751841e-1,
    1.30949400261658844e+0, 0.00000000000000000e+0, 7.81473899692937213e+0, 1.38777878078144568e-17, 9.99833214197751841e-1, 9.99833214197751841e-1, -9.99833214197751841e-1, -9.99833214197751841e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0,
    0.00000000000000000e+0, 2.00000000000000000e+0, 2.77555756156289135e-17, 3.00000000000000000e+0, -1.82631811848982702e-2, -1.82631811848982702e-2, 1.82631811848982702e-2, 1.82631811848982702e-2, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0,
    0.00000000000000000e+0, 0.00000000000000000e+0, 9.99833214197751841e-1, -1.82631811848982702e-2, 3.58620689655172553e+0, -1.58620689655172464e+0, -3.58620689655172420e+0, 1.58620689655172464e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0,
    0.00000000000000000e+0, 0.00000000000000000e+0, 9.99833214197751841e-1, -1.82631811848982702e-2, -1.58620689655172464e+0, 3.58620689655172420e+0, 1.58620689655172376e+0, -3.58620689655172420e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0,
    0.00000000000000000e+0, 0.00000000000000000e+0, -9.99833214197751841e-1, 1.82631811848982702e-2, -3.58620689655172420e+0, 1.58620689655172376e+0, 3.58620689655172376e+0, -1.58620689655172376e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0,
    0.00000000000000000e+0, 0.00000000000000000e+0, -9.99833214197751841e-1, 1.82631811848982702e-2, 1.58620689655172464e+0, -3.58620689655172420e+0, -1.58620689655172376e+0, 3.58620689655172420e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0,
    1.82631811694281762e-2, 9.99833214198034392e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 1.52925092265527374e+0, 2.16993691546189327e+0, -1.52925092264058948e+0, -2.16993691547637502e+0, 5.80198096826711751e-1, -1.69936915476375155e-1, -5.80198096812027275e-1, 1.69936915461893406e-1,
    1.82631811848982702e-2, 9.99833214197751841e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 2.16993691546189371e+0, 3.58620689651971247e+0, -2.16993691542943301e+0, -3.58620689655172420e+0, 7.20058809921182430e-2, -1.58620689655172420e+0, -7.20058809596574312e-2, 1.58620689651971247e+0,
    -1.82631811694281762e-2, -9.99833214198034392e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, -1.52925092264058948e+0, -2.16993691542943301e+0, 1.52925092262590523e+0, 2.16993691544391476e+0, -5.80198096838359323e-1, 1.69936915443914621e-1, 5.80198096823674847e-1, -1.69936915429433094e-1,
    -1.82631811848982702e-2, -9.99833214197751841e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, -2.16993691547637502e+0, -3.58620689655172420e+0, 2.16993691544391432e+0, 3.58620689658373637e+0, -7.20058809806313205e-2, 1.58620689658373637e+0, 7.20058809481707307e-2, -1.58620689655172420e+0,
    1.82631811694281762e-2, 9.99833214198034392e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 5.80198096826711751e-1, 7.20058809921181459e-2, -5.80198096838359323e-1, -7.20058809806314454e-2, 1.33298692617056469e+0, 1.92799411901936857e+0, -1.33298692618221248e+0, -1.92799411900788176e+0,
    1.82631811848982702e-2, 9.99833214197751841e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, -1.69936915476375017e-1, -1.58620689655172420e+0, 1.69936915443914538e-1, 1.58620689658373637e+0, 1.92799411901936857e+0, 3.58620689658373637e+0, -1.92799411905182927e+0, -3.58620689655172420e+0,
    -1.82631811694281762e-2, -9.99833214198034392e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, -5.80198096812027275e-1, -7.20058809596574173e-2, 5.80198096823674847e-1, 7.20058809481706058e-2, -1.33298692618221248e+0, -1.92799411905182949e+0, 1.33298692619386006e+0, 1.92799411904034268e+0,
    -1.82631811848982702e-2, -9.99833214197751841e-1, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 0.00000000000000000e+0, 1.69936915461893490e-1, 1.58620689651971247e+0, -1.69936915429433011e-1, -1.58620689655172420e+0, -1.92799411900788176e+0, -3.58620689655172420e+0, 1.92799411904034246e+0, 3.58620689651971247e+0,
  ];
  const A = UtilEngine.newMatrixFromArray(16, a);
  const b = [
    -4.59283366470280046e-9, -4.64265533701581200e-7, 3.20247829750491730e-8, 3.23721644338841176e-6, -3.32487342739907993e-18, 5.92685276224588301e-18, 3.32487342739907839e-18, -5.92685276224588301e-18, -1.73562875970576125e-10, 4.44091327432430900e-17, 1.73562875970576125e-10, -4.44091327432430777e-17, -1.73562875969717227e-10, 4.44112503256112257e-17, 1.73562875969717227e-10, -4.44112503256112134e-17
  ];
  const n = A.length;
  const joint = [ true, true, true, true, false, false, false, false, false, false, false,
    false, false, false, false, false ];
  const cf = new ComputeForces('T', new RandomLCG(81976022));
  for (let i=0; i<=30; i++) {
    if (VERBOSE)
      console.log('\n\n====================================================');
    const f = new Array(n);
    switch (i) {
      case 0:
        // use default next contact policy
        break;
      case 1:
        cf.setNextContactPolicy(NextContactPolicy.MIN_ACCEL);
        break;
      case 2:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
      case 3:
        cf.setNextContactPolicy(NextContactPolicy.HYBRID);
        break;
      default:
        cf.setNextContactPolicy(NextContactPolicy.RANDOM);
        break;
    }
    const error2 = cf.compute_forces(A, f, b, joint, false, i*0.1);
    assertEquals(-1, error2);
    assertTrue( b.length == n && f.length == n );
    let accel = UtilEngine.matrixMultiply(A, f);
    accel = UtilEngine.vectorAdd(accel, b);
    const SMALL_ACCEL = 5E-6;
    const maxAccel = ComputeForces.maxAccel(accel, joint, n);
    const maxForce = UtilEngine.maxSize(f);
    if (VERBOSE) {
      console.log(Util.NF7(i*0.1)+' maxForce='+Util.NF7(maxForce)
        +' length='+Util.NF7(UtilEngine.vectorLength(f))
        +' maxAccel='+Util.NFE(maxAccel)
        );
      UtilEngine.printArray('f ', f, Util.NF7);
      UtilEngine.printList('order', cf.getOrder());
    }
    assertTrue( ComputeForces.checkForceAccel(SMALL_ACCEL, f, accel, joint) );
    assertTrue( maxAccel < SMALL_ACCEL );
    assertTrue(maxForce < 100);
  }
};
