import { assertEquals, schedule, startTest, assertTrue, assertFalse, assertRoughlyEquals } from "../../../test/TestRig.js";
import { MockClock } from "../../../test/MockClock.js";
import { Clock, ClockTask } from "../Clock.js";
import { ParameterNumber, ParameterBoolean, ParameterString, GenericEvent } from "../Observe.js";
const groupName = 'ClockTest.';
export default function scheduleTests() {
    schedule(testClock1);
    schedule(testClock2);
    schedule(testClock3);
}
;
function testClock1() {
    startTest(groupName + 'testClock1');
    const tol = 1E-14;
    const mockClock = new MockClock();
    const myClock = new Clock('test_clock', mockClock);
    const mockObsvr1 = new MockObserver1();
    myClock.addObserver(mockObsvr1);
    assertEquals(0, mockObsvr1.numEvents);
    assertEquals(0, mockObsvr1.numBooleans);
    assertEquals(0, mockObsvr1.numDoubles);
    assertEquals(0, mockObsvr1.numStrings);
    assertEquals(0, mockClock.systemTime());
    assertEquals(0, myClock.getTime());
    assertEquals(0, myClock.getRealTime());
    assertFalse(myClock.isRunning());
    assertEquals(1, myClock.getTimeRate());
    assertEquals(0, mockObsvr1.numEvents);
    myClock.resume();
    assertTrue(myClock.isRunning());
    assertEquals(1, mockObsvr1.numEvents);
    assertEquals(0, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(0, mockObsvr1.numSetTimeEvents);
    assertEquals(0, myClock.getTime());
    assertEquals(0, myClock.getRealTime());
    mockClock.tick(49);
    assertRoughlyEquals(0.049, mockClock.systemTime(), tol);
    assertEquals(1, mockObsvr1.numEvents);
    assertRoughlyEquals(0.049, myClock.getTime(), tol);
    assertRoughlyEquals(0.049, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(1);
    assertRoughlyEquals(0.050, mockClock.systemTime(), tol);
    assertEquals(1, mockObsvr1.numEvents);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertRoughlyEquals(0.050, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(49);
    assertRoughlyEquals(0.099, mockClock.systemTime(), tol);
    assertEquals(1, mockObsvr1.numEvents);
    assertRoughlyEquals(0.099, myClock.getTime(), tol);
    assertRoughlyEquals(0.099, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(1);
    assertRoughlyEquals(0.100, mockClock.systemTime(), tol);
    assertEquals(1, mockObsvr1.numEvents);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.pause();
    assertEquals(2, mockObsvr1.numEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(1, mockObsvr1.numPauseEvents);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    assertFalse(myClock.isRunning());
    mockClock.tick(50);
    assertFalse(myClock.isRunning());
    assertRoughlyEquals(0.150, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    assertEquals(1, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(0, mockObsvr1.numSetTimeEvents);
    assertEquals(2, mockObsvr1.numEvents);
    mockClock.tick(50);
    assertRoughlyEquals(0.200, mockClock.systemTime(), tol);
    assertFalse(myClock.isRunning());
    assertEquals(2, mockObsvr1.numEvents);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    myClock.resume();
    assertRoughlyEquals(0.200, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    assertEquals(1, mockObsvr1.numPauseEvents);
    assertEquals(2, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(0, mockObsvr1.numSetTimeEvents);
    assertEquals(3, mockObsvr1.numEvents);
    assertTrue(myClock.isRunning());
    myClock.pause();
    assertEquals(2, mockObsvr1.numPauseEvents);
    assertEquals(2, mockObsvr1.numResumeEvents);
    assertEquals(4, mockObsvr1.numEvents);
    assertRoughlyEquals(0.200, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    mockClock.tick(50);
    assertRoughlyEquals(0.250, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    assertFalse(myClock.isRunning());
    assertEquals(2, mockObsvr1.numPauseEvents);
    assertEquals(2, mockObsvr1.numResumeEvents);
    assertEquals(4, mockObsvr1.numEvents);
    myClock.resume();
    assertEquals(2, mockObsvr1.numPauseEvents);
    assertEquals(3, mockObsvr1.numResumeEvents);
    assertEquals(5, mockObsvr1.numEvents);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertRoughlyEquals(0.100, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(50);
    assertRoughlyEquals(0.300, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.150, myClock.getTime(), tol);
    assertRoughlyEquals(0.150, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.setTime(0.125);
    assertEquals(2, mockObsvr1.numPauseEvents);
    assertEquals(3, mockObsvr1.numResumeEvents);
    assertEquals(1, mockObsvr1.numSetTimeEvents);
    assertEquals(0, mockObsvr1.numDoubles);
    assertEquals(6, mockObsvr1.numEvents);
    assertRoughlyEquals(0.300, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.125, myClock.getTime(), tol);
    assertRoughlyEquals(0.150, myClock.getRealTime(), tol);
    mockClock.tick(50);
    assertRoughlyEquals(0.350, mockClock.systemTime(), tol);
    assertEquals(6, mockObsvr1.numEvents);
    assertRoughlyEquals(0.175, myClock.getTime(), tol);
    assertRoughlyEquals(0.200, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.step(0.040);
    assertEquals(0, mockObsvr1.numDoubles);
    assertEquals(3, mockObsvr1.numPauseEvents);
    assertEquals(3, mockObsvr1.numResumeEvents);
    assertEquals(1, mockObsvr1.numStepEvents);
    assertEquals(1, mockObsvr1.numSetTimeEvents);
    assertEquals(8, mockObsvr1.numEvents);
    assertRoughlyEquals(0.350, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.215, myClock.getTime(), tol);
    assertRoughlyEquals(0.240, myClock.getRealTime(), tol);
    assertFalse(myClock.isRunning());
    assertTrue(myClock.isStepping());
    myClock.clearStepMode();
    assertFalse(myClock.isStepping());
    mockClock.tick(40);
    assertRoughlyEquals(0.390, mockClock.systemTime(), tol);
    assertEquals(8, mockObsvr1.numEvents);
    assertRoughlyEquals(0.215, myClock.getTime(), tol);
    assertRoughlyEquals(0.240, myClock.getRealTime(), tol);
    assertFalse(myClock.isRunning());
    myClock.step(0.040);
    assertEquals(0, mockObsvr1.numDoubles);
    assertEquals(3, mockObsvr1.numPauseEvents);
    assertEquals(3, mockObsvr1.numResumeEvents);
    assertEquals(2, mockObsvr1.numStepEvents);
    assertEquals(1, mockObsvr1.numSetTimeEvents);
    assertEquals(9, mockObsvr1.numEvents);
    assertRoughlyEquals(0.390, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.255, myClock.getTime(), tol);
    assertRoughlyEquals(0.280, myClock.getRealTime(), tol);
    assertFalse(myClock.isRunning());
    assertTrue(myClock.isStepping());
    myClock.clearStepMode();
    assertFalse(myClock.isStepping());
    mockClock.tick(40);
    assertRoughlyEquals(0.430, mockClock.systemTime(), tol);
    assertEquals(9, mockObsvr1.numEvents);
    assertRoughlyEquals(0.255, myClock.getTime(), tol);
    assertRoughlyEquals(0.280, myClock.getRealTime(), tol);
    assertFalse(myClock.isRunning());
}
;
function testClock2() {
    startTest(groupName + 'testClock2');
    const tol = 1E-14;
    const mockClock = new MockClock();
    const myClock = new Clock('test_clock', mockClock);
    const mockObsvr1 = new MockObserver1();
    myClock.addObserver(mockObsvr1);
    assertEquals(0, mockObsvr1.numEvents);
    assertEquals(0, mockObsvr1.numBooleans);
    assertEquals(0, mockObsvr1.numDoubles);
    assertEquals(0, mockObsvr1.numStrings);
    assertRoughlyEquals(0, mockClock.systemTime(), tol);
    assertEquals(0, myClock.getTime());
    assertEquals(0, myClock.getRealTime());
    assertFalse(myClock.isRunning());
    assertEquals(1, myClock.getTimeRate());
    assertEquals(0, mockObsvr1.numEvents);
    myClock.resume();
    assertTrue(myClock.isRunning());
    assertEquals(0, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(0, mockObsvr1.numSetTimeEvents);
    assertEquals(1, mockObsvr1.numEvents);
    assertEquals(0, myClock.getTime());
    assertEquals(0, myClock.getRealTime());
    mockClock.tick(50);
    assertRoughlyEquals(0.050, mockClock.systemTime(), tol);
    assertEquals(1, mockObsvr1.numEvents);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertRoughlyEquals(0.050, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.setTimeRate(2);
    assertEquals(2, myClock.getTimeRate());
    assertRoughlyEquals(0.050, mockClock.systemTime(), tol);
    assertEquals(0, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(0, mockObsvr1.numSetTimeEvents);
    assertEquals(1, mockObsvr1.numDoubles);
    assertEquals(2, mockObsvr1.numEvents);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertRoughlyEquals(0.050, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(50);
    assertRoughlyEquals(0.100, mockClock.systemTime(), tol);
    assertEquals(2, mockObsvr1.numEvents);
    assertRoughlyEquals(0.150, myClock.getTime(), tol);
    assertRoughlyEquals(0.150, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(50);
    assertRoughlyEquals(0.150, mockClock.systemTime(), tol);
    assertEquals(2, mockObsvr1.numEvents);
    assertRoughlyEquals(0.250, myClock.getTime(), tol);
    assertRoughlyEquals(0.250, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.setTimeRate(0.5);
    assertRoughlyEquals(0.5, myClock.getTimeRate(), tol);
    assertRoughlyEquals(0.150, mockClock.systemTime(), tol);
    assertEquals(0, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(0, mockObsvr1.numSetTimeEvents);
    assertEquals(2, mockObsvr1.numDoubles);
    assertEquals(3, mockObsvr1.numEvents);
    assertRoughlyEquals(0.250, myClock.getTime(), tol);
    assertRoughlyEquals(0.250, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(50);
    assertRoughlyEquals(0.200, mockClock.systemTime(), tol);
    assertEquals(3, mockObsvr1.numEvents);
    assertRoughlyEquals(0.275, myClock.getTime(), tol);
    assertRoughlyEquals(0.275, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.setTime(0.250);
    assertEquals(0, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(1, mockObsvr1.numSetTimeEvents);
    assertEquals(2, mockObsvr1.numDoubles);
    assertEquals(4, mockObsvr1.numEvents);
    assertRoughlyEquals(0.250, myClock.getTime(), tol);
    assertRoughlyEquals(0.275, myClock.getRealTime(), tol);
    mockClock.tick(50);
    assertRoughlyEquals(0.250, mockClock.systemTime(), tol);
    assertEquals(4, mockObsvr1.numEvents);
    assertRoughlyEquals(0.275, myClock.getTime(), tol);
    assertRoughlyEquals(0.300, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(50);
    assertRoughlyEquals(0.300, mockClock.systemTime(), tol);
    assertEquals(4, mockObsvr1.numEvents);
    assertRoughlyEquals(0.300, myClock.getTime(), tol);
    assertRoughlyEquals(0.325, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    myClock.setTimeRate(1.0);
    assertEquals(0, mockObsvr1.numPauseEvents);
    assertEquals(1, mockObsvr1.numResumeEvents);
    assertEquals(0, mockObsvr1.numStepEvents);
    assertEquals(1, mockObsvr1.numSetTimeEvents);
    assertEquals(3, mockObsvr1.numDoubles);
    assertEquals(5, mockObsvr1.numEvents);
    assertRoughlyEquals(1.0, myClock.getTimeRate(), tol);
    mockClock.tick(50);
    assertRoughlyEquals(0.350, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.350, myClock.getTime(), tol);
    assertRoughlyEquals(0.375, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
    mockClock.tick(50);
    assertRoughlyEquals(0.400, mockClock.systemTime(), tol);
    assertEquals(5, mockObsvr1.numEvents);
    assertRoughlyEquals(0.400, myClock.getTime(), tol);
    assertRoughlyEquals(0.425, myClock.getRealTime(), tol);
    assertTrue(myClock.isRunning());
}
;
function testClock3() {
    startTest(groupName + 'testClock3');
    const tol = 1E-3;
    const mockClock = new MockClock();
    const myClock = new Clock('test_clock', mockClock);
    let testVar = '';
    const myTask_0 = new ClockTask(0, () => testVar = '0', mockClock);
    const myTask_A = new ClockTask(0.1, () => testVar = 'A', mockClock);
    const myTask_D = new ClockTask(0.15, null, mockClock);
    myTask_D.setCallback(() => { testVar = 'D'; myClock.removeTask(myTask_D); });
    const myTask_B = new ClockTask(0.2, () => testVar = 'B', mockClock);
    const myTask_C = new ClockTask(0.3, () => { testVar = 'C'; myClock.setTime(0); }, mockClock);
    myClock.addTask(myTask_0);
    myClock.addTask(myTask_D);
    myClock.addTask(myTask_A);
    myClock.addTask(myTask_B);
    myClock.addTask(myTask_C);
    assertRoughlyEquals(0, mockClock.systemTime(), tol);
    assertEquals(0, myClock.getTime());
    assertFalse(myClock.isRunning());
    assertEquals(1, myClock.getTimeRate());
    myClock.resume();
    assertTrue(myClock.isRunning());
    assertEquals(0, myClock.getTime());
    assertEquals(0, myClock.getRealTime());
    mockClock.tick(50);
    assertRoughlyEquals(0.050, mockClock.systemTime(), tol);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertTrue(myClock.isRunning());
    assertEquals('0', testVar);
    mockClock.tick(50);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertEquals('A', testVar);
    mockClock.tick(50);
    assertRoughlyEquals(0.150, myClock.getTime(), tol);
    assertEquals('D', testVar);
    mockClock.tick(50);
    assertRoughlyEquals(0.200, myClock.getTime(), tol);
    assertEquals('B', testVar);
    mockClock.tick(150);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertEquals('0', testVar);
    myClock.setTime(0);
    assertRoughlyEquals(0.00, myClock.getTime(), tol);
    assertEquals('0', testVar);
    myClock.removeTask(myTask_A);
    mockClock.tick(100);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertEquals('0', testVar);
    mockClock.tick(50);
    assertRoughlyEquals(0.150, myClock.getTime(), tol);
    assertEquals('0', testVar);
    mockClock.tick(50);
    assertRoughlyEquals(0.200, myClock.getTime(), tol);
    assertEquals('B', testVar);
    mockClock.tick(100);
    assertRoughlyEquals(0, myClock.getTime(), tol);
    assertEquals('0', testVar);
    myClock.addTask(myTask_A);
    myClock.setTimeRate(2);
    myClock.setTime(0);
    assertRoughlyEquals(0.00, myClock.getTime(), tol);
    assertEquals('0', testVar);
    mockClock.tick(50);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertEquals('A', testVar);
    mockClock.tick(25);
    assertRoughlyEquals(0.150, myClock.getTime(), tol);
    assertEquals('A', testVar);
    mockClock.tick(25);
    assertRoughlyEquals(0.200, myClock.getTime(), tol);
    assertEquals('B', testVar);
    mockClock.tick(75);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertEquals('0', testVar);
    myClock.setTimeRate(0.5);
    myClock.setTime(0);
    assertRoughlyEquals(0.00, myClock.getTime(), tol);
    assertEquals('0', testVar);
    mockClock.tick(200);
    assertRoughlyEquals(0.100, myClock.getTime(), tol);
    assertEquals('A', testVar);
    mockClock.tick(100);
    assertRoughlyEquals(0.150, myClock.getTime(), tol);
    assertEquals('A', testVar);
    mockClock.tick(100);
    assertRoughlyEquals(0.200, myClock.getTime(), tol);
    assertEquals('B', testVar);
    mockClock.tick(300);
    assertRoughlyEquals(0.050, myClock.getTime(), tol);
    assertEquals('0', testVar);
}
;
class MockObserver1 {
    constructor() {
        this.numEvents = 0;
        this.numStartEvents = 0;
        this.numStopEvents = 0;
        this.numPauseEvents = 0;
        this.numResumeEvents = 0;
        this.numStepEvents = 0;
        this.numSetTimeEvents = 0;
        this.numBooleans = 0;
        this.numDoubles = 0;
        this.numStrings = 0;
    }
    ;
    observe(event) {
        if (event instanceof GenericEvent) {
            this.numEvents++;
            if (event.nameEquals(Clock.CLOCK_PAUSE)) {
                this.numPauseEvents++;
            }
            else if (event.nameEquals(Clock.CLOCK_RESUME)) {
                this.numResumeEvents++;
            }
            else if (event.nameEquals(Clock.CLOCK_STEP)) {
                this.numStepEvents++;
            }
            else if (event.nameEquals(Clock.CLOCK_SET_TIME)) {
                this.numSetTimeEvents++;
            }
            else {
                throw 'unknown event ' + event.getName();
            }
        }
        else if (event instanceof ParameterBoolean) {
            this.numBooleans++;
            this.numEvents++;
        }
        else if (event instanceof ParameterNumber) {
            this.numDoubles++;
            this.numEvents++;
        }
        else if (event instanceof ParameterString) {
            this.numStrings++;
            this.numEvents++;
        }
    }
    ;
    toStringShort() {
        return 'MockObserver1';
    }
    ;
}
;
